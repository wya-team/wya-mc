<template>
	<view style="height: 100vh">
		<mc-recycle-list
			height="calc(100vh - 200rpx)"
			total="{{ total }}"
			bind:loadData="loadData1" 
		>
			<block wx:for="{{ list }}" wx:key="index" wx:item="item">
				<view style="height: 100rpx; background: #fff; border-bottom: 1rpx solid #333">
					<text> {{index}}: {{item}} </text>
				</view>
			</block>
		</mc-recycle-list>
	</view>
	<!-- <mc-tabs active="{{ activeTab }}" bind:change="handleTab">
		<mc-tabs-pane
			wx:for="{{ tabsWithName }}"
			wx:key="index"
			name="{{ item.name }}"
			info="{{ index + 10 }}"
			title="{{ '标签 ' + item.index }}"
		>
			<mc-recycle-list
				show="{{ item.name == activeTab }}"
				height="calc(100vh - 200rpx)"
				total="{{ listInfo[item.name].total }}"
				bind:loadData="loadData" 
			>
				<block wx:for="{{ listInfo[item.name].list }}" wx:key="index" wx:item="item">
					<view style="height: 100rpx; background: #fff; border-bottom: 1rpx solid #333">
						<text> {{index}}: {{item}} </text>
					</view>
				</block>
			</mc-recycle-list>
		</mc-tabs-pane>
	</mc-tabs> -->
</template>
<script>
const app = getApp();

const generateArray = base => {
	return Array.from({ length: 30 }).map((self, i) => base * 10 + i);
};

Page({
	data: {
		listInfo: {
			a: {
				list: [],
				current: 0,
				total: 0,
			},
			b: {
				list: [],
				current: 0,
				total: 0,
			},
			c: {
				list: [],
				current: 0,
				total: 0,
			}
		},
		list: [],
		current: 0,
		total: 0,
		scrollTop: 0,
		activeTab: 'a',
		tabsWithName: [
			{ name: 'a', index: 1 },
			{ name: 'b', index: 2 },
			{ name: 'c', index: 3 }
		],
	},
	handleTab(event) {
		this.setData({
			activeTab: event.detail.name
		});
	},
	loadData(e) {
		const { page, refresh, done } = e.detail;
		const { activeTab } = this.data;
		this.request(page)
			.then(res => {
				this.setData({
					listInfo: {
						...this.data.listInfo,
						[activeTab]: {
							list: refresh ? res.data.list : this.data.listInfo[activeTab].list.concat(res.data.list),
							current: res.data.page.current,
							total: res.data.page.total,
						}
					}
				});
				done();
			});
	},
	loadData1(e) {
		const { page, refresh, done } = e.detail;
		this.request(page)
			.then(res => {
				this.setData({
					list: refresh ? res.data.list : this.data.list.concat(res.data.list),
					current: res.data.page.current,
					total: res.data.page.total,
				});
				done();
			});
	},

	request(page) {
		return new Promise((resolve, reject) => {
			setTimeout(() => {
				resolve({
					status: 1,
					data: {
						page: {
							current: page,
							total: 3,
						},
						list: generateArray(page),
					}
				});
			}, 500);
		});
	}
});

</script>
<config>
{
  "usingComponents": {
  	"mc-recycle-list": "../../components/recycle-list/index",
	  "mc-tabs": "../../components/tabs/index",
		"mc-tabs-pane": "../../components/tabs/tabs-pane"
  }
}
</config>
