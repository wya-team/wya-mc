<template>
	<view class="mc-input mc-class is-{{ type }}">
		<view wx:if="{{usePrependSlot}}" class="mc-input__prepend">
			<slot name="prepend"></slot>
		</view>
		<block wx:if="{{ type === 'textarea' }}">
			<textarea 
				hidden="{{ shouldHide }}"
				id="{{uuid}}"
				class="mc-input__textarea"
				value="{{ currentValue }}"
				focus="{{ focus }}"
				cursor="{{ cursor }}"
				auto-focus="{{ autoFocus }}"
				fixed="{{ fixed }}"
				disabled="{{ disabled || readonly }}"
				maxlength="{{ maxlength }}"
				auto-height="{{ autoHeight }}"
				placeholder="{{ placeholder }}"
				placeholder-style="{{ placeholderStyle }}"
				placeholder-class="{{ placeholderClass }}"
				hold-keyboard="{{ holdKeyboard }}"
				cursor-spacing="{{ cursorSpacing }}"
				adjust-position="{{ adjustPosition }}"
				selection-end="{{ selectionEnd }}"
				selection-start="{{ selectionStart }}"
				show-confirm-bar="{{ showConfirmBar }}"
				style="{{ textareaStyle }}"
				disable-default-padding
				bindinput="handleInput"
				bindblur="handleBlur"
				bindfocus="handleFocus"
				bindconfirm="handleConfirm"
				bindkeyboardheightchange="handleKeyboardHeightChange"
				bindlinechange="handleLineChange"
			/>
			<!-- 将当前的textarea样式copy出来用view展示，需拿到textarea当前的高度 -->
			<view
				hidden="{{ !shouldHide || !viewPlaceholder }}"
				class="mc-input__textarea {{!currentValue ? placeholderClass : ''}}"
				style="{{ textareaStyle }}; height: {{textareaHeight}}px; overflow-y: auto; box-sizing: border-box; word-break: break-all;  {{!currentValue ? placeholderStyle : ''}}"
			>
				{{currentValue || placeholder}}
			</view>
		</block>
		<input 
			wx:else
			class="mc-input__input {{right ? 'is-right' : ''}} {{disabled ? 'is-disabled' : ''}} mc-input-class"
			type="{{ type }}"
			focus="{{ focus }}"
			cursor="{{ cursor }}"
			value="{{ currentValue }}"
			auto-focus="{{ autoFocus }}"
			disabled="{{ disabled || readonly }}"
			maxlength="{{ maxlength }}"
			placeholder="{{ placeholder }}"
			placeholder-style="{{ placeholderStyle }}"
			placeholder-class="{{ placeholderClass }}"
			confirm-type="{{ confirmType }}"
			confirm-hold="{{ confirmHold }}"
			hold-keyboard="{{ holdKeyboard }}"
			cursor-spacing="{{ cursorSpacing }}"
			adjust-position="{{ adjustPosition }}"
			selection-end="{{ selectionEnd }}"
			selection-start="{{ selectionStart }}"
			password="{{ password || type === 'password' }}"
			bindinput="handleInput"
			bindblur="handleBlur"
			bindfocus="handleFocus"
			bindconfirm="handleConfirm"
			bindkeyboardheightchange="handleKeyboardHeightChange"
		/>
		<view wx:if="{{useAppendslot || clearable}}" class="mc-input__append">
			<mc-icon 
				wx:if="{{!disabled && !useClearSlot && currentValue && clearable && isFocus}}" 
				type="clear" 
				mc-class="mc-input__clear" 
				bind:click="handleClear"
			/>
			<slot wx:else name="append"></slot>
		</view>
	</view>
</template>
<script>
import TextareaHack from '../common/hack/textarea';
import McComponent from '../common/component';
import { props } from './props';
import { getUid } from '../common/utils';

McComponent({
	addGlobalClass: ['mc-input-class'],
	relations: {
		'../form/form-item': {
			type: 'ancestor',
			linked(parent) {
				this.parent = parent;
			},
			unlinked(child) {
				this.parent = null;
			}
		},
		'../collapse/collapse-item': {
			type: 'ancestor',
			linked(parent) {
				this.collaspeItem = parent;
			},
			unlinked(child) {
				this.collaspeItem = null;
			}
		},
	},
	props: {
		...props,
		password: Boolean,
		confirmType: String,
		confirmHold: Boolean,
		useClearSlot: {
			type: Boolean,
			value: false
		},
		clearable: {
			type: Boolean,
			value: false
		},
		right: Boolean,
		usePrependSlot: Boolean,
		useAppendslot: Boolean,
		autoHeight: Boolean,
		fixed: Boolean,
		showConfirmBar: Boolean,
		textareaStyle: String,
		viewPlaceholder: {
			type: Boolean,
			value: true
		},

		/**
		 * 以下属性，在type=number|digit 生效，
		 */
		// 输入框内是否必须有值
		required: {
			type: Boolean,
			value: false
		},
		// 小数点位数
		precision: {
			type: Number,
			value: 0,
		},
		min: {
			type: Number,
			value: 0,
		},
		max: {
			type: Number,
			value: Number.MAX_SAFE_INTEGER,
		},
		// 可接受function
		output: {
			type: null,
			value: 'number'
		}
	},
	data: {
		currentValue: '',
		shouldHide: false,
		textareaHeight: 150, // 默认150px
		isFocus: false
	},
	observers: {
		type(val) {
			if (val === 'textarea') {
				this.setData({
					uuid: getUid('input-textarea')
				});
				TextareaHack.on(this);

				// 渲染需要时间
				setTimeout(() => {
					this.getTextareaHeight();
				}, 500);
			}
		},
	},
	lifetimes: {
		attached() {
			this.setData({ currentValue: this.data.value });
		},
		detached() {
			if (this.data.type === 'textarea') {
				TextareaHack.off(this);
			}
		}
	},
	methods: {
		getTextareaHeight() {
			if (!this.data.viewPlaceholder) return;
			let query = wx.createSelectorQuery().in(this);
			query.select(`#${this.data.uuid}`).boundingClientRect((rect) => {
				this.setData({
					textareaHeight: rect.height
				});
			}).exec();
		},
		handleInput(event) {
			let value = event.detail.value;
			const { maxlength, type, precision } = this.data;
			if (maxlength > -1) {
				value = value.length > maxlength ? value.substring(0, maxlength) : value;
			}
			if (/[-]{2,}/.test(value)) { // `--` -> `-`
				value = '-';
			}
			if (value !== '' && ['number', 'digit'].includes(type)) {
				let regex = precision
					? new RegExp(`(-*)(\\d*(?:\\.\\d{0,${precision}})?).*$`)
					: new RegExp(`(.*)\\.`);
				value = value.replace(regex, '$1$2');
				// 0002 -> 2, 0.2 -> .2
				value = value === '0' ? '0' : value.replace(/^[0]{1,}/, '0');
				// '0.' -> '.' -> '0.'
				value = value.charAt(0) === '.' ? `0${value}` : value;
			}
			this.setData({
				currentValue: value
			});
			this.sync(value);
		},
		handleBlur(event) {
			setTimeout(() => {
				this.setData({ isFocus: false });
			}, 100);
			const value = this.composeValue(this.data.currentValue);
			this.sync(value);
			wx.nextTick(() => {
				this.$emit('blur', value);
				this.parent && this.parent.fieldBlur();
			});
		},
		handleFocus(event) {
			this.setData({ isFocus: true });
			this.$emit('focus', event.detail);
		},
		handleConfirm(event) {
			const { value = '' } = event.detail || {};
			this.$emit('confirm', value);
		},
		handleKeyboardHeightChange(event) {
			this.$emit('keyboardheightchange', event.detail);
		},
		handleLineChange(event) {
			if (this.data.autoHeight && this.data.textareaHeight < event.detail.height) {
				// 自动撑开模式需要在此计算
				const textarea = this.getTextareaHeight();
			}
			this.$emit('linechange', event.detail);
		},
		handleClear() {
			this.setData({ currentValue: '' });
			wx.nextTick(() => {
				this.sync('');
				this.$emit('clear', '');
			});
		},
		// 最大最小值比较
		compareWithBoundary(value) {
			const { min, max } = this.data;
			if (value > max) {
				value = max;
			} else if (value < min) {
				value = min;
			}
			return value;
		},
		composeValue(value) {
			const { type, min, required, output } = this.data;
			if (!['number', 'digit'].includes(type)) return value;

			value = /^(-|)$/.test(value) ? '' : this.compareWithBoundary(value);
			value = required && !value ? String(min) : value;
			return typeof output === 'function' 
				? output(value)
				: output === 'number' && value !== '' ? Number(value) : value;
		},
		sync(v) {
			if (v === this.data.value) return;
			wx.nextTick(() => {
				this.$emit('input', v);
				this.$emit('change', v);
				this.parent && this.parent.fieldChange();
			});
		}
	}
});

</script>
<style lang="scss">
@import '../common/index.scss';

.mc-input {
	position: relative;
	width: 100%;
	background-color: #ffffff;
	height: 48rpx;
	line-height: 1.5;
	font-size: 32rpx;
	display: flex;
	align-items: center;
	box-sizing: border-box;
	&.is-textarea {
		min-height: 48rpx;
		height: auto;
	}
	.mc-input__textarea {
		padding: 7rpx;
		width: 100%;
		min-height: 120rpx;
	}
	.mc-input__prepend {
		padding-right: 13rpx; 
	}
	.mc-input__input {
		flex: 1;
		&.is-right {
			text-align: right;
		}
		padding-left: 7rpx;
		padding-right: 7rpx;
		&.is-disabled {
			background-color: #f3f3f3;
			opacity: 1;
			cursor: not-allowed;
			color: #ccc;
		}
	}
	.mc-input__append {
		padding-left: 20rpx; 
	}
	.mc-input__clear {
		color: #999999;
	}
}
</style>
<config>
{
	"component": true,
	"usingComponents": {
		"mc-icon": "../icon/index"
	}
}
</config>
