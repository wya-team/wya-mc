<template>
	<view class="mc-date-picker mc-class" bindtap="handleClick">
		<mc-list-item 
			wx:if="{{!useItemSlot}}"
			wrapper-class="{{paddingNone ? 'mc-date-picker__padding-none' : ''}}"
			content-class="content-class"
			indent="{{0}}"
			content="{{extra}}"
			label="{{label}}"
			label-width="{{labelWidth}}"
			border="{{border}}"
		/>
		<slot wx:else></slot>
	</view>
	<mc-picker-popup 
		id="{{tag}}"
		title="{{title}}"
		cancel-text="{{cancelText}}"
		ok-text="{{okText}}"
		show-toolbar="{{showToolbar}}"
		bind:close="handleCancel"
	>
		<mc-picker-view
			value="{{currentValue}}"
			dataSource="{{dataSource}}"
			mode="{{mode}}"
			indicator-style="{{indicatorStyle}}"
			indicator-class="{{indicatorClass}}"
			bind:change="handleChange"
			bind:ready="handleViewReady"
			bind:label-change="handleLabelChange"
		/>
	</mc-picker-popup>
</template>
<script>
import { isEqualWith } from '../common/utils';
import McComponent from '../common/component';
import Portal from '../portal/index';
import { pickerViewProps, pickerPopupProps } from './props';
import { createDataSource } from './utils';

McComponent({
	externalClasses: ['content-class'],
	relations: {
		'../form/form-item': {
			type: 'ancestor',
			linked(parent) {
				this.parent = parent;
				this.setData({
					paddingNone: true
				});
			},
			unlinked(child) {
				this.parent = null;
				this.setData({
					paddingNone: false
				});
			}
		}
	},
	props: {
		...pickerViewProps,
		...pickerPopupProps,
		value: {
			type: String,
			value: '',
			observer(val) {
				let formatValue = val.split('-');
				if (!isEqualWith(formatValue, this.data.currentValue)) {
					this.setData({
						currentValue: formatValue
					});
				}
			}
		},
		mode: {
			type: String, // date、month、quarter
			value: 'date'
		},
		minDate: {
			type: String,
			value: '1940/01/01 00:00'
		},
		maxDate: {
			type: String,
			value: '2030/12/31 23:59'
		},
		label: String,
		labelWidth: {
			type: String,
			optionalTypes: [Number],
		},
		tag: {
			type: String,
			value: 'picker-popup'
		},
		useItemSlot: {
			type: Boolean,
			value: false
		},
		border: Boolean,
		extra: {
			type: String,
			value: '请选择'
		},
	},
	data: {
		currentValue: ''
	},
	observers: {
		'mode': function (mode) {
			this.setData({
				dataSource: createDataSource(mode, {
					minDate: new Date(this.data.minDate),
					maxDate: new Date(this.data.maxDate),
				})
			});
		}
	},
	lifetimes: {
		attached() {
			this.Func = new Portal({ 
				el: `#${this.data.tag}` 
			});
		}
	},
	destroyed() {
	
	},
	methods: {
		handleViewReady(event) {
			this.viewInstance = event.detail;
		},
		handleClick(event) {
			if (this.Func) {
				// TODO 异步获取dataSource
				this.Func.popup({
					context: this.selectComponent(`#${this.data.tag}`),
					title: this.data.title
				}).then((res) => {
					this.handleOK();
				}).catch((err) => {
					this.$emit('cancel');
					this.handleClose();
				});
			}
		},
		handleLabelChange(event) {
			event.detail.length > 0 && this.setData({
				extra: event.detail.join(',')
			});
		},
		handleChange(event) {
			this.setData({
				pickValue: event.detail || []
			});
		},
		handleOK() {
			const pickValue = this.data.pickValue || this.viewInstance.getDefaultValue();
			const value = pickValue.join('-');
			this.setData({
				extra: value,
				currentValue: pickValue
			});
			this.$emit('change', { value });
			this.parent && this.parent.fieldChange();
		},
		handleCancel() {
			this.$emit('cancel');
			this.handleClose();
		},
		handleClose() {
			this.viewInstance.reset(this.data.currentValue);
			this.$emit('close');
		}
	}
});
</script>
<style lang="scss">
@import '../common/index.scss';

.mc-date-picker {
	.mc-picker__padding-none {
		padding: 0
	}
}

</style>
<config>
{
	"component": true,
	"usingComponents": {
		"mc-list-item": "../list/list-item",
		"mc-picker-popup": "../picker/picker-popup",
		"mc-picker-view": "./picker-view"
	}
}
</config>
