<template>
	<view class="mc-number-dance-item" style="{{ itemStyle }}">
		<view 
			class="mc-number-dance-item__dance-strip" 
			style="{{ stripStyle }}"
		>
			<view
				wx:for="{{ NUMBER_COUNT }}"
				wx:key="item"
				class="mc-number-dance-item__number"
				style="{{ numberStyle }}"
			>
				{{ index === 10 ? 0 : index }}
			</view>
		</view>
	</view>
</template>
<script>
import McComponent from '../common/component';
import itemProps from './item-props.js';

// 滚动animation-duration，单位ms
const ANIMATION_DURATION = 600;
const NUMBER_COUNT = 11;

McComponent({
	name: 'mc-number-dance-item',
	props: {
		...itemProps
	},
	data: {
		NUMBER_COUNT,
		stripStyle: '',
	},
	observers: {
		value(value) {
			/**
			 * 在组件初始化时，这个observer会比组件ready生命周期先触发，也就说明此时组件还没有布局完成
			 * 而此时如果在这里里调用了dance()，会导致设置的transition过渡样式在初始化的时候看不到
			 * 因此需在组件ready触发后的条件下才去调用dance方法
			 */
			(this._isReady && this._oldValue != value || this.data.scrollType === 'hard') && this.dance();
			this._oldValue = value;
		}
	},
	lifetimes: {
		ready() {
			// 标识ready生命周期已触发
			this._isReady = true;
			this.dance();
		}
	},
	methods: {
		dance() {
			const { mode, duration, value, scrollType } = this.data;
			if (+value >= 10) {
				throw new Error('mc-number-dance-item: "value" is expected number from 0 to 9');
			}
			if (mode === 'scroll') {
				const translateY = -100 / NUMBER_COUNT * Number(value);
				const transitionStyle = `transition:transform ${duration || 600}ms ease-out;`;
				const transformStyle = `transform:translate3d(0, ${translateY}%, 0);`;
				// 滚动方式为hard时，采用animation的方式
				if (scrollType === 'hard') {
					this.setData({
						stripStyle: `animation: move ${ANIMATION_DURATION}ms linear infinite;filter: blur(1rpx);`
					});
					this._timer && clearTimeout(this._timer);
					this._timer = setTimeout(() => {
						this.setData({ stripStyle: transformStyle });
					}, duration);
				} else {
					this.setData({ stripStyle: `${transitionStyle}${transformStyle}` });
				}
			}
		},
	},
});
</script>
<style lang="scss">
.mc-number-dance-item {
	overflow: hidden;
	display: inline-block;
	height: 48rpx;
	line-height: 48rpx;
	text-align: center;
	&__number {
		height: 48rpx;
		line-height: 48rpx;
		font-size: 48rpx;
	}
}
@keyframes move {
	from {
		transform: translate3d(0, -90%, 0);
	}
	to {
		transform: translate3d(0, 0%, 0);
	}
}
</style>
<config>
{
	"component": true
}
</config>
