<template>
	<scroll-view
		class="mc-recycle-list-core mc-class"
		scroll-y="{{ !disabled }}"
		scroll-top='{{ scrollTop }}' 
		lower-threshold="{{ lowerThreshold }}"
		enable-back-to-top="{{ true }}"
		style="height: {{ height }}"
		bind:scroll="handleScroll"
		bind:scrolltolower="handleEndReached"
	>
		<slot />

		<view 
			wx:if="{{ showScrollStatus }}" 
			class="mc-recycle-list-core__pull-up pull-up-class"
			style="{{ pullUpStyle }}"
		>
			<text class="mc-recycle-list-core__text">{{ SCROLL_STATUS[scrollStatus] }}</text>
		</view>
		<block wx:if="{{ scrollStatus !== 0 && scrollStatus !== 1 }}">
			<slot name="extra" />
		</block>
	</scroll-view>
</template>
<script>
import McComponent from '../common/component';
import { SCROLL_STATUS } from './constant';
import { coreProps } from './props';

McComponent({
	externalClasses: ['pull-up-class'],
	props: {
		...coreProps,
		total: {
			...coreProps.total,
			observer(value) {
				/**
				 * 特别声明(项目中)：连续两次total: 0, 就无法触发loadData
				 * 1. 与后端约定分页的接口数据为空时，要求后端total也要确保为1（总页数）;
				 * 
				 * 必要时候进行转换（1的情况，错误情况等）
				 * {
				 * 	status: 1,
				 * 	data: {
				 * 		list: [],
				 * 		page: { count: 0, current: 1, total: 1 }
				 * 	}
				 * }
				 */
				const fn = () => {
					if (value === 0) {
						this.setData({
							scrollStatus: 0
						});
						this.loadDataForScroll({ force: true });
					}
				};
				this.isReady ? fn() : (this.loadCallback = fn);
			}
		},
	},
	data: {
		/**
		 * 0: '上滑加载', 
		 * 1: '加载中', 
		 * 2: '已全部加载', 
		 * 3: '网络不稳定，请稍后重试', 
		 * 4: '没有内容可供显示'
		 */
		scrollStatus: 0,
		SCROLL_STATUS,
		/**
		 * 0.未touchstart 
		 * 1.pulling但未达到pauseY 
		 * 2.pulling达到pauseY 
		 * 3.进入pause状态 （loading）
		 */
		currentScrollTop: 0,
		animate: {}
	},
	lifetimes: {
		created() {
			// 初始时要调用的请求方法，show和total都会导致触发，依次覆盖，在ready时调用
			this.loadCallback = () => {
				if (this.data.current == 0) {
					this.loadDataForScroll();
				}
			};
		},
		ready() {
			console.warn('[wya-mc/recycle-list/core]: current属性必传，请检查');
			this.isReady = true;
			this.$emit('ready', this);
			this.loadCallback && this.loadCallback();
		},
	},
	observers: {
		'show': function (show) {
			const fn = () => {
				if (this.data.current == 0) {
					wx.nextTick(() => {
						this.loadDataForScroll();
					});
				}
			};
			this.isReady ? fn() : (this.loadCallback = fn);
		},
	},
	methods: {
		handleScroll(e) {
			if (this.data.listenScroll) {
				this.$emit('scroll', e.detail);
			}
		},
		handleEndReached() {
			this.loadDataForScroll();
		},
		loadDataForScroll(opts = {}) {
			const { force = false } = opts;
			if (!this.data.show || !this.data.scroll) return;
			if ((!force && this.data.scrollStatus >= 1)) return;
			this.setData({ scrollStatus: 1 });

			let page = force ? 1 : ~~this.data.current + 1;
			this.$emit('loadData', {
				page,
				done: () => {
					let scrollStatus = this.data.total <= page ? 2 : 0;
					this.setData({
						scrollStatus,
					});
				}
			});
		},
	}
});

</script>

<style lang="scss">
.mc-recycle-list-core {
	height: 100%;
	position: relative;
	box-sizing: border-box;
	.mc-recycle-list-core__pull-up {
		display: flex;
		align-items: center;
		justify-content: center;
		height: 60rpx;
		color: #333;
		.mc-recycle-list-core__text {
			line-height: 60rpx;
			font-size: 24rpx;
		}
	}
}
</style>

<config>
{
	"component": true
}
</config>