<template>
	<wxs module="scroll" src="./index.wxs"></wxs>
	<scroll-view
		style="height:{{height}}"
		scroll-y="true"
		scroll-top='{{scrollTop}}' 
		lower-threshold="100"
		enable-back-to-top="true"
		class="mc-recycle-list mc-class"
		refresher-enabled="{{false}}"
		pullDownHeight="{{pullDownHeight}}"
		change:pullDownHeight="{{scroll.setPullDownHeight}}"
		bind:scroll="{{scroll.handleScroll}}"
		bind:scrolltolower="handleEndReached"
		bind:touchstart="{{scroll.handleTouchStart}}"
		bind:touchend="handleTouchEnd"
	>
		<view class="mc-recycle-list__pull-down pull-down-class {{ pullDownStatus === 3 || pullDownStatus === 0 ? 'is-transition' : '' }}" style="overflow: hidden;">
			<text class="mc-recycle-list__text">{{ pullDownText }}</text>
		</view>

		<view
			class="mc-recycle-list__content content-class"
			bind:touchmove="{{scroll.handleTouchMove}}"
		>
			<slot />
		</view>

		<view class="mc-recycle-list__scroll pull-up-class">
			<text class="mc-recycle-list__text"> {{ scrollText }}</text>
		</view>
		<block wx:if="{{ scrollStatus !== 0 && scrollStatus !== 1 }}">
			<slot name="extra" />
		</block>
	</scroll-view>
</template>
<script>
import McComponent from '../common/component';
import { PULL_DOWN_STATUS, PULL_UP_STATUS, SCROLL_STATUS } from './constant';

McComponent({
	externalClasses: ['content-class', 'pull-down-class', 'pull-up-class'],
	props: {
		pauseY: {
			type: Number,
			value: 40
		},
		height: {
			type: String
		},
		total: {
			type: Number,
			value: 0,
			observer(value) {
				/**
				 * 特别声明(项目中)：连续两次total: 0, 就无法触发loadData
				 * 1. 与后端约定分页的接口数据为空时，要求后端total也要确保为1（总页数）;
				 * 
				 * 必要时候进行转换（1的情况，错误情况等）
				 * {
				 * 	status: 1,
				 * 	data: {
				 * 		list: [],
				 * 		page: { count: 0, current: 1, total: 1 }
				 * 	}
				 * }
				 */
				if (value === 0) {
					this.setData({
						currentPage: 0,
						scrollStatus: 0
					});
					this.loadDataForScroll({ force: true });
				}
			}
		},
		scroll: {
			type: Boolean,
			value: true
		},
		pull: {
			type: Boolean,
			value: true
		},
		show: {
			type: Boolean,
			value: true
		},
		scrollTop: { // 内部滚动距离
			type: Number,
			value: 0
		},
		listenSrcoll: { // 是否抛出滚动事件
			type: Boolean,
			value: false
		}
	},
	data: {
		y: 0,
		/**
		 * 0.未touchstart 
		 * 1.pulling但未达到pauseY 
		 * 2.pulling达到pauseY 
		 * 3.进入pause状态 （loading）
		 */
		pullDownStatus: 0,
		pullDownText: PULL_DOWN_STATUS[0],
		/**
		 * 0: '上滑加载', 
		 * 1: '加载中', 
		 * 2: '已全部加载', 
		 * 3: '网络不稳定，请稍后重试', 
		 * 4: '没有内容可供显示'
		 */
		scrollStatus: 0,
		scrollText: SCROLL_STATUS[0],
		/**
		 * 0.未touchstart 
		 * 1.pulling但未达到pauseY 
		 * 2.pulling达到pauseY 
		 * 3.进入pause状态 （loading）
		 */
		pullUpStatus: 0,
		currentScrollTop: 0,
		// 页面
		currentPage: 0,
		animate: {}
	},
	lifetimes: {
		ready() {
			if (this.data.currentPage === 0) {
				this.loadDataForScroll();
			}
		},
		detached() {
			
		},
	},
	observers: {
		'show': function (show) {
			if (this.data.currentPage === 0) {
				wx.nextTick(() => {
					this.loadDataForScroll();
				});
			}
		}
	},
	methods: {
		handleScroll(e) {
			const scrollTop = e.detail.scrollTop;
			this.setData({
				currentScrollTop: scrollTop
			});
			if (this.data.listenSrcoll) {
				this.$emit('scroll', scrollTop);
			}
		},
		handleEndReached() {
			this.loadDataForScroll();
		},
		handleTouchStart(e) {
			if (!this.canRefresh()) return;
			if (e.touches.length === 1) {
				this.startY = e.touches[0].clientY;
			}
		},
		handleTouchMove(e) {
			if (!this.canRefresh() || this.data.currentScrollTop > 0) return;
			let pulledY = e.touches[0].clientY - this.startY;

			// 滚动条所在位置
			if (this.data.currentScrollTop <= 0) {
				let pullDownStatus = pulledY > this.data.pauseY ? 2 : 1;
				if (this.data.pullDownStatus !== pullDownStatus) {
					this.setData({
						pullDownStatus,
						pullDownText: PULL_DOWN_STATUS[pullDownStatus],
						// y: this.easing(pulledY)
					});
				}
			}
		},
		handleTouchEnd(e) {
			if (!this.canRefresh()) return;

			if (this.data.pullDownStatus == 2) {
				this.setData({
					pullDownStatus: 3,
					pullDownText: PULL_DOWN_STATUS["3"],
					pullDownHeight: this.data.pauseY
				});
				this.$emit('loadData', { 
					page: 1, 
					refresh: true, 
					done: () => {
						this.setData({
							pullDownText: PULL_DOWN_STATUS["0"],
							pullDownStatus: 0,
							pullDownHeight: 0
						});
					}
				});
			} else {
				this.setData({
					pullDownText: PULL_DOWN_STATUS["0"],
					pullDownStatus: 0,
					pullDownHeight: 0
				});
			}
		},

		easing(pulledY) {
			// 从顶部开始
			let startY = 0;
			// 允许拖拽的最大距离
			let maxY = 500;
			// 提示标签最大有效拖拽距离
			let duration = 2.5;
			return maxY / duration * Math.sin(pulledY / maxY * (Math.PI / 2)) + startY;
		},

		loadDataForScroll(opts = {}) {
			const { force = false } = opts;
			if (!this.data.show || !this.data.scroll) return;
			if ((!force && this.data.scrollStatus >= 1)) return;


			this.setData({
				scrollStatus: 1,
				scrollText: SCROLL_STATUS["1"],
			});

			let page = force ? 1 : this.data.currentPage + 1;
			this.$emit('loadData', {
				page,
				done: () => {
					let scrollStatus = this.data.total <= page ? 2 : 0;
					this.setData({
						scrollStatus, // TODO
						scrollText: SCROLL_STATUS[scrollStatus],
						currentPage: page
					});
				}
			});
		},

		canRefresh() {
			return false;
			// return this.data.show 
			// 	&& this.data.pull
			// 	&& this.data.pullDownStatus !== 3 
			// 	&& this.data.scrollStatus !== 1;
		}
	}
});
</script>
<style lang="scss">
.mc-recycle-list {
	position: relative;
	overflow-y: scroll;
}

.mc-recycle-list__pull-down {
	line-height: 60rpx;
	font-size: 12rpx;
}

.mc-recycle-list__scroll {
	display: flex;
	align-items: center;
	justify-content: center;
	height: 60rpx;
	.mc-recycle-list__text {
		color: #333;
		line-height: 60rpx;
		font-size: 24rpx;
	}
}

.mc-recycle-list__pull-down {
	display: flex;
	align-items: center;
	justify-content: center;
	height: 60rpx;
	&.is-transition {
		transition: height .3s ease
	}
	.mc-recycle-list__text {
		color: #333;
		line-height: 60rpx;
		font-size: 24rpx;
	}
}
</style>
<config>
{
	"component": true
}
</config>
