<template>
	<!-- zIndex 不加1，是让滚动的内容层级更高一点 -->
	<view 
		wx:if="{{ opacity <= 0 }}"
		class="mc-popup-movable__header-placeholder" 
		style="height: {{ heights.header }}px; z-index: {{ zIndex }}; top: 0; background: white; {{ safeAreaTopStyle }}"
	/>

	<!-- 考虑初始高度 -->
	<view 
		wx:if="{{ useHeaderSlot }}"
		class="mc-popup-movable__header" 
		style="opacity: {{ 1 - opacity }}; z-index: {{ zIndex + 1 }}; top: 0;"
	>
		<slot name="header" />
	</view>
	<view 
		wx:if="{{ useFooterSlot }}"
		class="mc-popup-movable__footer" 
		style="opacity: {{ 1 - opacity }}; z-index: {{ zIndex + 1 }}; bottom: 0;"
	>
		<slot name="footer" />
	</view>
	<mc-transition 
		wx:if="{{ closeable }}" 
		visible="{{ visible }}"
		duration="{{ 300 }}"
		mc-class="mc-popup-movable__header-close-icon" 
		mc-style="opacity: {{ 1 - opacity }}; z-index: {{ zIndex + 1 }}; top: {{ heights.header + 20 }}px" 
	>
		<mc-icon 
			type="close" 
			mc-style="color: white; font-size: 28rpx"
			bind:click="handleClose"
		/>
	</mc-transition> 
	<movable-area 
		class="mc-popup-movable"
		style="z-index: {{ zIndex }}; {{ areaStyle  }}"
	>
		<movable-view 
			class="mc-popup-movable__view"
			style="{{ viewStyle }}"
			y="{{ y }}"
			damping="{{ damping }}"
			direction="vertical"
			bind:tap="handleMovableViewTap"
			bind:change="handleMovableViewChange"
			bind:touchstart="handleMovableViewTouchStart"
			bind:touchend="handleMovableViewTouchEnd"
		>
			<!-- 不考虑集成mc-recycle-list, 出现双movavle -->
			<scroll-view 
				style="position: relative; height: 100%;"
				scrollY="{{ scrollable }}"
				enhanced
				show-scrollbar="{{ false }}"
				bind:scroll="handleScroll"
				bind:scrolltolower="handleEndReached"
			>
				<view 
					class="mc-popup-movable__placeholder"
					style="height: {{ placeTopHeight }}px"
				>
					<mc-transition 
						wx:if="{{ isActive && closeable }}" 
						visible="{{ visible }}"
						duration="{{ 300 }}"
						mc-class="mc-popup-movable__inner-close-icon" 
						mc-style="opacity: {{ opacity }}" 
					>
						<mc-icon 
							type="close" 
							mc-style="color: white; font-size: 20rpx"
							bind:click="handleClose"
						/>
					</mc-transition> 
				</view>
				<slot />
				
				<view 
					wx:if="{{ isActive && useContentHeaderSlot }}"
					class="mc-popup-movable__content-header"
					style="top: {{ placeTopHeight }}px"
				>
					<slot name="content-header" />
				</view>
				<view 
					wx:if="{{ isActive && useContentFooterSlot }}"
					class="mc-popup-movable__content-footer"
				>
					<slot name="content-footer" />
				</view>
			</scroll-view>
		</movable-view>
	</movable-area>
</template>
<script>
import McComponent from '../common/component';

const initStyle = (heights = {}) => {
	const systemInfo = wx.getSystemInfoSync();
	const { windowWidth: w, windowHeight: h } = systemInfo;
	const { content: originH = 0, header: headerH = 0 } = heights;
	return {
		// areaStyle: `width: ${w}px; height: ${2 * h}px; top: ${-(h - originH)}px`,
		areaStyle: `width: ${w}px; height: ${h}px;`,
		viewStyle: `width: ${w}px; height: ${2 * h}px;`,
		placeTopHeight: h + headerH,
		y: -originH
	};
};
McComponent({
	props: {
		// 注意这个值必须和内容的层级保持一致
		zIndex: {
			type: Number,
			value: 1001,
		},

		heights: {
			type: Object,
			value: {
				content: 0,
				header: 0
			},
			observer() {
				this.setData({
					...initStyle(this.data.heights)
				});
			}
		},

		threshold: {
			type: Number,
			value: 100
		},

		damping: {
			type: Number,
			value: 50
		},
		scrollable: {
			type: Boolean,
			value: true
		},
		closeable: {
			type: Boolean,
			value: false
		},
		visible: {
			type: Boolean,
			value: false,
			observer() {
				this.resetActive();
			}
		},
		useHeaderSlot: {
			type: Boolean,
			value: false
		},
		useFooterSlot: {
			type: Boolean,
			value: false
		},

		useContentHeaderSlot: {
			type: Boolean,
			value: false
		},

		useContentFooterSlot: {
			type: Boolean,
			value: false
		},

		safeAreaTopStyle: {
			type: String,
			value: ''
		}
	},
	data: {
		...initStyle(),
		opacity: 1,
		isActive: false
	},
	lifetimes: {
		attached() {
			this._tagStart = false;

			this._tagStartH = 0;
			this._tagEndH = 0;

			this.resetActive();
		}
	},
	methods: {
		/**
		 * 延迟设置动画
		 * @return {[type]} [description]
		 */
		async resetActive() {
			await new Promise(_ => setTimeout(_, 300));
			this.setData({
				isActive: !!this.data.visible
			});

			this.triggerEvent('active', this.data.isActive);
		},
		getSize() {
			if (!this.w || !this.h || !this.headerH) {
				const systemInfo = wx.getSystemInfoSync();
				const { windowWidth, windowHeight, safeArea } = systemInfo;

				this.w = windowWidth;
				this.h = windowHeight;
				this.headerH = safeArea.top;
			}
			
			return {
				w: this.w,
				h: this.h,
				headerH: this.headerH,
				originH: this.data.heights.content
			};
		},

		handleClose(e) {
			this.close(e);
		},

		/**
		 * 关闭
		 */
		close(e) {
			const { h, originH } = this.getSize();
			this.setData({
				y: h
			});

			setTimeout(() => {
				this.triggerEvent('close', e);

				this.setData({
					y: -originH,
					isFullsceen: false
				});

				this._tagEndH = this.data.heights.content;
			}, 300);
		},

		/**
		 * 全屏
		 */
		fullsceen(e) {
			const { h, headerH } = this.getSize();
			this.setData({
				y: -h,
				opacity: 0
			});

			this._tagEndH = h;

			this.triggerEvent('fullscreen', e);
		},

		/**
		 * 恢复到原来大小
		 */
		recover(e) {
			const { h, originH } = this.getSize();
			this.setData({
				y: -originH,
				opacity: 1
			});

			this._tagEndH = this.data.heights.content;

			this.triggerEvent('recover', e);
		},

		handleMovableViewTap(e) {
			const { h, originH } = this.getSize();

			if (h !== this._tagEndH && h - e.detail.y > originH) {
				this.close(e);
			}
		},

		handleMovableViewTouchStart() {
			const { originH } = this.getSize();

			this._tagStartH = this._tagEndH || originH;
			this._tagStart = true;
		},

		handleMovableViewChange(e) {
			if (!this._tagStart) return;
			let diff = e.detail.y;
			const { h } = this.getSize();

			const height = -e.detail.y;

			this._tagEndH = height;

			const opacity = (h - this._tagEndH) / (h - this.data.heights.header - this.data.heights.content);
			this.setData({
				opacity: opacity > 1 ? 1 : opacity < 0 ? 0 : opacity
			});

		},

		handleMovableViewTouchEnd(e) {
			const { threshold } = this.data;
			if (this._tagStart) {
				const { h, originH, headerH } = this.getSize();
				// 距底部
				let lowerThreshold = threshold || originH / 2;
				lowerThreshold = Math.min(originH / 2, threshold);

				// 距顶部
				let upperThreshold = threshold || (h - originH - headerH) / 2;
				upperThreshold = Math.min((h - originH - headerH) / 2, threshold);

				let methodKey = (this._tagEndH < originH && (originH - this._tagEndH) > lowerThreshold)
					? 'close'
					: (
						this._tagEndH > originH 
						&& (
							this._tagStartH < this._tagEndH 
								? this._tagEndH - originH > upperThreshold
								: this._tagStartH - this._tagEndH < upperThreshold
						)
					)
						? 'fullsceen'
						: 'recover';

				this[methodKey](e);
			}
			this._tagStart = false;
		},

		handleScroll(e) {
			this.triggerEvent('scroll', e.detail);
		},
		handleEndReached(e) {
			this.triggerEvent('scrolltolower', e.detail);
		}
	}
});

</script>
<style lang="scss">
@import '../common/index.scss';

$opacity: 0;

.mc-popup-movable {
	position: fixed; 
	background-color: rgba(0, 255, 0, $opacity); 
	top: 0;
	&__header {
		position: fixed; 
		left: 0;
		right: 0;
	}
	&__footer {
		position: fixed; 
		left: 0;
		right: 0;
	}
	&__header-placeholder {
		position: fixed; 
		left: 0;
		right: 0;
	}
	&__view {
		background-color: rgba(0, 0, 255, $opacity);
	}

	&__placeholder {
		position: relative;
	}

	&__inner-close-icon {
		position: absolute;
		left: 30rpx;
		bottom: -80rpx;
		z-index: 1;
		background: rgba(0, 0, 0, .5);
		width: 44rpx;
		height: 44rpx;
		border-radius: 50%;

		display: flex;
		align-items: center;
		justify-content: center;

		transition: opacity .3s;
	}

	&__header-close-icon {
		position: fixed;
		left: 30rpx;

		background: rgba(0, 0, 0, .5);
		width: 60rpx;
		height: 60rpx;
		border-radius: 50%;

		display: flex;
		align-items: center;
		justify-content: center;

		transition: opacity .3s;
	}

	&__content-header {
		position: fixed;
		left: 0;
		right: 0;
	}

	&__content-footer {
		position: fixed;
		bottom: 0;
		left: 0;
		right: 0;
	}
}

</style>
<config>
{
	"component": true,
	"usingComponents": {
		"mc-transition": "../transition/index",
		"mc-icon": "../icon/index"
	}
}
</config>
