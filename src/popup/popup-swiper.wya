<template>
	<mc-transition 
		wx:if="{{ mask }}" 
		visible="{{ mask && visible }}" 
		duration="{{ duration }}"
		mc-class="mc-popup-swiper__mask" 
		mc-style="{{ maskStyle }}"
		catch:touchmove="preventToucheMove" 
	/>
	<mc-movable-bottom 
		wx:if="{{ visible }}"
		
		visible="{{ visible }}"
		zIndex="{{ zIndex }}"
		scrollable="{{ scrollable }}"
		closeable="{{ closeable }}"
		heights="{{ heights }}"

		useHeaderSlot="{{ useHeaderSlot }}"
		useContentHeaderSlot="{{ useContentHeaderSlot }}"
		useContentFooterSlot="{{ useContentFooterSlot }}"

		safeAreaTopStyle="{{ safeAreaTopStyle }}"

		bind:scroll="handleScroll"
		bind:scrolltolower="handleEndReached"

		bind:close="handleClose"
		bind:fullscreen="handleFullscreen"
		bind:recover="handleRecover"
	>
		<view 
			wx:if="{{ inited }}" 
			class="mc-popup-swiper {{ classes }} mc-class"
			style="-webkit-transition-duration: {{ currentDuration }}ms; {{ display ? '' : 'display: none;' }}; {{ mcStyle }}; {{ popupForceStyle }}"
		>
			<slot />
		</view>

		<!-- 动态的头部 -->
		<slot 
			slot="header" 
			name="header" 
		/>

		<slot 
			slot="content-header" 
			name="content-header" 
		/>

		<slot 
			slot="content-footer" 
			name="content-footer" 
		/>
	</mc-movable-bottom>
</template>
<script>
import McComponent from '../common/component';
import { transition } from '../mixins/transition';
import { popup } from '../mixins/popup';
import TextareaHack from '../common/hack/textarea';
import Resize from '../common/resize';

McComponent({
	mixins: [transition(false), popup],
	externalClasses: [
		'enter-class',
		'enter-active-class',
		'enter-to-class',
		'leave-class',
		'leave-active-class',
		'leave-to-class'
	],
	props: {
		placement: {
			type: String,
			value: 'bottom',
		},
		closeable: {
			type: Boolean,
			value: false
		},
		maskStyle: String,
		zIndex: {
			type: Number,
			value: 1001,
		},
		scrollable: {
			type: Boolean,
			value: true
		},
		useHeaderSlot: {
			type: Boolean,
			value: false
		},
		useContentHeaderSlot: {
			type: Boolean,
			value: false
		},
		useContentFooterSlot: {
			type: Boolean,
			value: false
		},

		safeAreaTop: {
			type: Number,
			value: -1
		},

		safeAreaTopStyle: {
			type: String,
			value: ''
		},

		headerSlotHeight: {
			type: Number,
			value: 0
		}
	},
	data: {
		heights: {}
	},
	observers: {
		visible(val) {
			// this.preVisible 未变化前的visible值，visible属性的监听在mixins transition 中，重写导致弹窗出不来，所以采用本地做标记
			if (this.preVisible !== val) {
				this.preVisible = val;
				TextareaHack.toggle(val);	
			}
		},
		inited(val) {
			if (!val) return;
			wx.nextTick(() => {
				this.createSelectorQuery()
					.select(`.mc-popup-swiper`)
					.boundingClientRect((res) => {
						if (!res || !res.height) return;
						let { height } = res;
						const { windowHeight, safeArea } = wx.getSystemInfoSync();
						if (height > windowHeight) {
							height = windowHeight;
							console.error('[@wya/mc]: 高度不能超高整屏');
						}

						let { headerSlotHeight, safeAreaTop } = this.data;

						headerSlotHeight = Resize.rpx2px(headerSlotHeight);
						safeAreaTop = safeAreaTop == -1 ? safeArea.top : Resize.rpx2px(safeAreaTop);
						this.setData({
							heights: {
								header: safeAreaTop + headerSlotHeight,
								headerSlot: headerSlotHeight,
								headerSafe: safeAreaTop,
								content: height
							},
							popupForceStyle: `;height: ${windowHeight - safeAreaTop - headerSlotHeight}px!important;`
						});
					})
					.exec();
			});
		}
	},
	lifetimes: {
		attached() {
			this.setData({ name: this.data.placement });
		},
	},
	methods: {
		handleClose() {
			const { maskClosable } = this.data;
			if (typeof maskClosable === 'function' ? !maskClosable() : !maskClosable) return;
			if (!this['@@PORTAL']) {
				this.setData({
					visible: false
				});
			}
			this.setData({ popupForceStyle: '' });
			this.$emit('close');
		},
		preventToucheMove() {},

		handleMovableMove(e) {
			// any
		},

		handleFullscreen() {
			const h = wx.getSystemInfoSync().windowHeight - this.data.heights.header;
			this.setData({
				popupForceStyle: `;min-height: ${h}px!important; height: unset!important;`
			});
		},

		handleRecover() {
			const h = wx.getSystemInfoSync().windowHeight - this.data.heights.header;
			this.setData({
				popupForceStyle: `;height: ${h}px!important;`
			});
		},

		handleScroll(e) {
			this.triggerEvent('scroll', e.detail);
		},
		handleEndReached(e) {
			this.triggerEvent('scrolltolower', e.detail);
		}
	}
});

</script>
<style lang="scss">
@import '../common/index.scss';

.mc-popup-swiper__mask {
	position: fixed;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
	background-color: rgba(0, 0, 0, .1);
	height: 100%;
	z-index: 1001;
}

.mc-popup-swiper {
	position: relative;
	box-sizing: border-box;
	overflow: hidden;
	transition-timing-function: ease;
	-webkit-animation: ease both;
	animation: ease both;
	-webkit-overflow-scrolling: touch;
	background-color: #fff;
}
.mc-popup-swiper__close {
	position: absolute;
	bottom: 20rpx;
	right: 20rpx;
	&-icon {
		color: #666;
	}
}

.mc-fade-enter-active,
.mc-fade-leave-active {
	transition-property: opacity
}

.mc-fade-enter,
.mc-fade-leave-to {
	opacity: 0
}

.mc-bottom-enter-active,
.mc-bottom-leave-active {
	transition-property: -webkit-transform;
	transition-property: transform;
	transition-property: transform, -webkit-transform
}

.mc-bottom-enter,
.mc-bottom-leave-to {
	-webkit-transform: translate3d(0, 100%, 0);
	transform: translate3d(0, 100%, 0)
}
</style>
<config>
{
	"component": true,
	"usingComponents": {
		"mc-transition": "../transition/index",
		"mc-icon": "../icon/index",
		"mc-movable-bottom": "./movable-bottom"
	}
}
</config>
