<template>
	<wxs src="../wxs/utils.wxs" module="utils" />
	<wxs module="tools">
		var includes = function includes(data, target) {
			return data.indexOf(target) !== -1;
		};

		module.exports = {
			includes: includes
		};
	</wxs>
	<view class="mc-upload-picker mc-class" style="{{ mcStyle }}">
		<view class="mc-upload-picker__wrapper">
			<!-- 以下为视频上传 -->
			<block wx:if="{{ tools.includes(picker, 'video')}}">
				<view
					wx:if="{{ previewVideo }}"
					wx:for="{{ currentValue.video }}"
					wx:key="index"
					class="mc-upload-picker__preview"
				>
					<video
						wx:if="{{ utils.assertTypeof(item, 'string') }}"
						src="{{ item }}"
						mc-class="mc-upload-picker__preview-video"
						style="width: {{ previewSize }}rpx; height: {{ previewSize }}rpx"
						data-index="{{ index }}"
						data-src="{{ item }}"
						controls="{{ false }}"
						showPlayBtn="{{ false }}"
						showCenterPlayBtn="{{ false }}"
						catchtap="handlePreviewVideo"
					/>
					<view
						wx:elif="{{ item.status === 'uploading' || item.status === 'failed' }}"
						class="mc-upload-picker__mask"
					>
						<block wx:if="{{ item.status === 'failed' }}">
							<mc-icon type="o-warning" class="mc-upload-picker__mask-icon" />
							<text class="mc-upload-picker__upload-text">上传失败</text>
						</block>
						<mc-spin wx:else size="{{ 50 }}" color="#ffffff" class="mc-upload-picker__loading" />
					</view>
					<mc-icon
						wx:if="{{!disabled && (utils.assertTypeof(item, 'string') || item.status === 'failed')}}"
						type="close"
						mc-class="mc-upload-picker__preview-delete"
						data-index="{{ index }}"
						data-type="video"
						catchtap="handleDeleteItem"
					/>
				</view>

				<!-- 上传样式 -->
				<block wx:if="{{!disabled && currentMultiple.video}}">
					<!-- fns="{{ currentUploadOptions.fns }}" -->
					<mc-upload 
						mode="video"
						max="{{currentMax.video}}"
						multiple="{{currentMultiple.video}}"
						disabled="{{ currentUploadOptions.disabled }}"
						url="{{ currentUploadOptions.url }}"
						headers="{{ currentUploadOptions.headers }}"
						name="{{ currentUploadOptions.name }}"
						accept="{{ currentUploadOptions.accept }}"
						size="{{ currentUploadOptions.size }}"
						sizeType="{{ currentUploadOptions.sizeType }}"
						sourceType="{{ currentUploadOptions.sourceType }}"
						compressed="{{ currentUploadOptions.compressed }}"
						maxDuration="{{ currentUploadOptions.maxDuration }}"
						camera="{{ currentUploadOptions.camera }}"
						parallel="{{ currentUploadOptions.parallel }}"
						fns="{{ currentUploadOptions.fns }}"
						class="mc-upload-picker__slot"
						bind:ready="handleReady"
					>
						<view
							class="mc-upload-picker__upload {{ disabled ? 'mc-upload-picker__upload--disabled': ''}}"
							style="width: {{ previewSize }}rpx; height: {{ previewSize }}rpx;"
						>
							<mc-icon type="plus" mc-class="mc-upload-picker__upload-icon" />
							<text wx:if="{{ uploadText }}" class="mc-upload-picker__upload-text">{{ uploadText }}</text>
						</view>
					</mc-upload>
				</block>
			</block>
			<!-- TODO file -->

			<!-- 以下为图片上传 -->
			<block wx:if="{{ tools.includes(picker, 'image')}}">
				<view
					wx:if="{{ previewImage }}"
					wx:for="{{ currentValue.image }}"
					wx:key="index"
					class="mc-upload-picker__preview"
				>
					<mc-image
						wx:if="{{ utils.assertTypeof(item, 'string') }}"
						fit="{{ imageFit }}"
						src="{{ item }}"
						alt="{{ '图片' + index }}"
						mc-class="mc-upload-picker__preview-image"
						width="{{ previewSize }}rpx"
						height="{{ previewSize }}rpx"
						data-index="{{ index }}"
						data-src="{{ item }}"
						catchtap="handlePreviewImage"
					/>
					<view
						wx:elif="{{ item.status === 'uploading' || item.status === 'failed' }}"
						class="mc-upload-picker__mask"
					>
						<block wx:if="{{ item.status === 'failed' }}">
							<mc-icon type="o-warning" class="mc-upload-picker__mask-icon" />
							<text class="mc-upload-picker__upload-text">上传失败</text>
						</block>
						<mc-spin wx:else size="{{50}}" color="#ffffff" class="mc-upload-picker__loading" />
					</view>
					<mc-icon
						wx:if="{{!disabled && (utils.assertTypeof(item, 'string') || item.status === 'failed')}}"
						type="close"
						mc-class="mc-upload-picker__preview-delete"
						data-index="{{ index }}"
						data-type="image"
						catchtap="handleDeleteItem"
					/>
				</view>

				<!-- 上传样式 -->
				<block wx:if="{{!disabled && currentMultiple.image}}">
					<!-- fns="{{ currentUploadOptions.fns }}" -->
					<mc-upload 
						mode="image"
						max="{{currentMax.image}}"
						multiple="{{currentMultiple.image}}"
						disabled="{{ currentUploadOptions.disabled }}"
						url="{{ currentUploadOptions.url }}"
						headers="{{ currentUploadOptions.headers }}"
						name="{{ currentUploadOptions.name }}"
						accept="{{ currentUploadOptions.accept }}"
						size="{{ currentUploadOptions.size }}"
						sizeType="{{ currentUploadOptions.sizeType }}"
						sourceType="{{ currentUploadOptions.sourceType }}"
						compressed="{{ currentUploadOptions.compressed }}"
						maxDuration="{{ currentUploadOptions.maxDuration }}"
						camera="{{ currentUploadOptions.camera }}"
						parallel="{{ currentUploadOptions.parallel }}"
						fns="{{ currentUploadOptions.fns }}"
						class="mc-upload-picker__slot"
						bind:ready="handleReady"
					>
						<view
							class="mc-upload-picker__upload {{ disabled ? 'mc-upload-picker__upload--disabled': ''}}"
							style="width: {{ previewSize }}rpx; height: {{ previewSize }}rpx;"
						>
							<mc-icon type="plus" mc-class="mc-upload-picker__upload-icon" />
							<text wx:if="{{ uploadText }}" class="mc-upload-picker__upload-text">{{ uploadText }}</text>
						</view>
					</mc-upload>
				</block>
			</block>
		</view>
	</view>

</template>
<script>
import McComponent from '../common/component';
import { isImageFile, recognizer } from './utils';

let app = getApp();
app.$mc = app.$mc || { config: {} };

const DEFAULT_UPLOAD_OPTIONS = {
	disabled: false,
	url: '',
	name: '',
	accept: '',
	size: Number.MAX_VALUE,
	sizeType: ['original', 'compressed'],
	sourceType: ['album', 'camera'],
	compressed: true,
	maxDuration: 60,
	camera: 'back',
	parallel: true,
	fns: null
};
McComponent({
	relations: {
		'../form/form-item': {
			type: 'ancestor',
			linked(parent) {
				this.parent = parent;
			},
			unlinked(child) {
				this.parent = null;
			}
		}
	},
	props: {
		disabled: Boolean,
		max: {
			type: Number,
			value: Number.MAX_SAFE_INTEGER
		},
		uploadText: String,
		previewSize: {
			type: null,
			value: 150,
		},
		name: {
			type: [String, Number],
			value: '',
		},
		dataSource: {
			type: Array,
			value: [],
			observer: 'rebuild',
		},
		picker: {
			type: Array,
			value: ['image']
		},

		previewVideo: {
			type: Boolean,
			value: true,
		},

		previewImage: {
			type: Boolean,
			value: true,
		},
		previewFullImage: {
			type: Boolean,
			value: true,
		},
		imageFit: {
			type: String,
			value: 'cover',
		},
		uploadOpts: {
			type: Object,
			value: DEFAULT_UPLOAD_OPTIONS
		},
		useReady: Boolean
	},
	data: {
		currentValue: {
			image: [],
			video: [],
			file: []
		},
		currentMax: {},
		currentMultiple: {},
		isInCount: true,
	},
	observers: {
		'uploadOpts': function (uploadOpts) {
			this.setData({
				currentUploadOptions: {
					...DEFAULT_UPLOAD_OPTIONS,
					...uploadOpts
				}
			});
			console.log(this.data.currentUploadOptions);
		},
	},
	lifetimes: {
		attached() {
			this.setData({ currentUploadOptions: this.data.uploadOpts });
		},
		ready() {
			this.rebuild(this.data.dataSource);
		}
	},
	methods: {
		rebuild(val) {
			const parsedValue = this.parseDataSource(val);
			this.setData(this.computed(parsedValue));
		},
		computed(value) {
			const { max, dataSource, currentValue } = this.data;

			let dynamicValue = value || currentValue;
			let computedValue = {};
			let computedMax = {};
			const { image = [], video = [], file = [] } = dynamicValue;
			
			computedValue = dynamicValue;

			// 如果过滤出上传成功的文件，在上传中时，currentValue占位，达到max，upload控件仍不会隐藏，用户可以再次上传，导致会超出max
			let imageC = image.length || 0;
			let videoC = video.length || 0;
			let fileC = file.length || 0;
			
			if (typeof max === 'number') {
				let curNum = imageC + videoC + fileC;
				const leftNum = max - curNum;
				computedMax = {
					image: leftNum,
					video: leftNum,
					file: leftNum,
				};
			} else if (typeof max === 'object') {
				const { image, video, file } = max;
				const $ = {};
				image && ($.image = image - imageC);
				video && ($.video = video - videoC);
				file && ($.file = file - fileC);

				computedMax = max;
			}

			return {
				currentMax: computedMax,
				currentValue: computedValue,
				currentMultiple: {
					image: computedMax.image >= 1,
					video: computedMax.video >= 1,
					file: computedMax.file >= 1,
				}
			};
		},

		isEmpty(v) {
			const [image, video, file] = Object.values(v);
			if (image.length || video.length || file.length) return false;
			return true;
		},

		parseDataSource(dataSource) {
			const fn = (app.$mc.config.UploadPicker || {}).recognizer || recognizer;
			return dataSource.reduce((pre, cur) => {
				switch (recognizer(cur)) {
					case 'image':
						!pre.image.includes(cur) && pre.image.push(cur);
						return pre;
					case 'video':
						!pre.video.includes(cur) && pre.video.push(cur);
						return pre;
					case 'file':
						!pre.file.includes(cur) && pre.file.push(cur);
						return pre;
					default:
						return pre;
				}
			}, this.data.currentValue);
		},

		getUrl(res) {
			return this.data.formatter ? this.data.formatter(res) : res[this.data.urlKey || 'url'];
		},
		handlePreviewImage(event) {
			const { index, src } = event.target.dataset;
			wx.previewImage({
				urls: this.data.currentValue.image,
				current: src,
				fail: (err) => {
					console.log('[mc-upload-picker] error：', err);
				}
			});
		},
		handlePreviewVideo(event) {
			const { index, src } = event.target.dataset;
			const { currentValue } = this.data;
			wx.previewMedia({
				sources: currentValue.video.map(item => {
					return {
						url: item,
						type: 'video'
					};
				}),
				current: index
			});
		},
		handleDeleteItem(event) {
			const { currentValue } = this.data;
			const { index, type } = event.target.dataset;
			const item = currentValue[type][index];
			if (!item) {
				console.error('【vc-upload-picker】: 没有找到要删除的元素');
				return;
			}
			if (item.errorFlag) {
				currentValue[type] = currentValue[type].filter(it => it.uid != item.uid);
				this.setData(this.computed(currentValue));
				return;
			}
			currentValue[type].splice(index, 1);
			this.setData(this.computed(currentValue));
			this.sync(currentValue[type], type);
		},
		handleReady(e) {
			let done = (fns = {}) => {
				let override = {};

				override.onFileStart = (res, type = 'image') => {
					const { currentValue } = this.data;
					res.title = res.name;

					currentValue[type].push(res);
					this.setData(this.computed(currentValue));
					fns.onFileStart && fns.onFileStart(res, type);
				};

				override.onFileProgress = (e, file, type = 'image') => {
					const { currentValue } = this.data;

					if (parseInt(e.percent, 10) <= 100) {
						currentValue[type] = currentValue[type].map((item) => {
							if (file.uid === item.uid) {
								return {
									...item,
									status: 'uploading'
								};
							}
							return item;
						});
						wx.nextTick(() => {
							this.setData({ currentValue });
						});
					}

					fns.onFileProgress && fns.onFileProgress(e, file, type);
				};

				override.onFileSuccess = (res, file, cycle, type = 'image') => {
					const { currentValue, formatter } = this.data;

					let dataSource;
					currentValue[type] = currentValue[type].map((item) => {
						if (item.uid === file.uid) {
							return this.getUrl(res);
						}
						return item;
					});

					// 将已经上传成功的文件传递给外部
					currentValue[type] = currentValue[type].filter((it) => !it.errorFlag && this.getUrl(res));
					

					this.setData(this.computed(currentValue));

					fns.onFileSuccess && fns.onFileSuccess(res, type);
					this.sync(currentValue[type], type);
				};

				override.onFileError = (res, file, cycle, type = 'image') => {
					const { currentValue } = this.data;
					// 内部保存上传失败的文件，不传递给外层
					currentValue[type] = currentValue[type].map((item) => {
						if (item.uid === file.uid) {
							return {
								name: file.name,
								type: file.type,
								...item,
								...res,
								errorFlag: new Date().getTime(),
								status: 'failed'
							};
						}
						return item;
					});

					this.setData({ currentValue });
					fns.onFileError && fns.onFileError(res, ...args);
				};

				e.detail.done({ 
					...fns, 
					...override 
				});
			};
			if (this.data.useReady) {
				this.$emit('ready', { done });
			} else {
				done();
			}
		},

		sync(v, type = 'image') {
			const { currentValue, picker } = this.data;
			v = {
				...currentValue,
				[type]: v
			};

			v = picker.reduce((pre, cur) => {
				return pre.concat(v[cur] || []);
			}, []);

			wx.nextTick(() => {
				this.$emit('change', v);
				this.parent && this.parent.fieldChange();
			});
		},
	}
});

</script>
<style lang="scss">
@import '../common/index.scss';

.mc-upload-picker {
	position: relative;
	display: inline-block
}

.mc-upload-picker__wrapper {
	display: -webkit-flex;
	display: flex;
	-webkit-flex-wrap: wrap;
	flex-wrap: wrap
}

.mc-upload-picker__slot:empty {
	display: none
}

.mc-upload-picker__slot:not(:empty)+.mc-upload-picker__upload {
	display: none !important
}

.mc-upload-picker__upload {
	position: relative;
	display: -webkit-flex;
	display: flex;
	-webkit-flex-direction: column;
	flex-direction: column;
	-webkit-align-items: center;
	align-items: center;
	-webkit-justify-content: center;
	justify-content: center;
	box-sizing: border-box;
	width: 150rpx;
	height: 150rpx;
	margin: 0 22rpx 22rpx 0;
	background-color: rgba(242,242,242,1);
	border-radius: 4rpx
}

.mc-upload-picker__upload:active {
	background-color: #f2f3f5
}

.mc-upload-picker__upload-icon {
	color: #999999;
	font-size: 50rpx !important;
}

.mc-upload-picker__upload-text {
	margin-top: 4rpx;
	color: #969799;
	font-size: 24rpx
}

.mc-upload-picker__upload--disabled {
	opacity: .5;
	opacity: var(--uploader-disabled-opacity, .5)
}

.mc-upload-picker__preview {
	position: relative;
	margin: 0 22rpx 22rpx 0;
	cursor: pointer;
	width: 150rpx;
	height: 150rpx;
}

.mc-upload-picker__preview-image,
.mc-upload-picker__preview-video {
	display: block;
	overflow: hidden;
	border-radius: 4rpx
}

.mc-upload-picker__preview-delete {
	position: absolute;
	top: -12rpx;
	right: -12rpx;
	width: 32rpx;
	height: 32rpx;
	font-size: 16rpx !important;
	line-height: 32rpx;
	text-align: center;
	color: #fff;
	background-color: #969799;
	border-radius: 100%;
}

.mc-upload-picker__file {
	display: -webkit-flex;
	display: flex;
	-webkit-flex-direction: column;
	flex-direction: column;
	-webkit-align-items: center;
	align-items: center;
	-webkit-justify-content: center;
	justify-content: center;
	background-color: #f7f8fa;
	border-radius: 16rpx
}

.mc-upload-picker__file-icon {
	color: #646566;
	font-size: 40rpx
}

.mc-upload-picker__file-name {
	box-sizing: border-box;
	width: 100%;
	margin-top: 16rpx;
	padding: 0 8rpx;
	color: #646566;
	font-size: 24rpx;
	text-align: center
}

.mc-upload-picker__mask {
	position: absolute;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	color: #fff;
	background-color: rgba(50, 50, 51, .88);
	border-radius: 4rpx
}

.mc-upload-picker__mask-icon {
	font-size: 44rpx
}

.mc-upload-picker__mask-message {
	margin-top: 12rpx;
	padding: 0 8rpx;
	font-size: 24rpx;
	line-height: 28rpx
}

.mc-upload-picker__loading {
	width: 44rpx;
	height: 44rpx;
	color: #fff
}

</style>
<config>
{
	"component": true,
	"usingComponents": {
		"mc-icon": "../icon/index",
		"mc-upload": "../upload/index",
		"mc-spin": "../spin/index",
		"mc-image": "../image/index"
	}
}
</config>
