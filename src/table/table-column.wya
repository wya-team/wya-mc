<template>
	<view />
</template>
<script>
import { getUid } from '../common/utils';
import McComponent from '../common/component';

McComponent({
	relations: {
		'./index': {
			type: 'ancestor',
			linked(parent) {
				this.parent = parent;
			},
			unlinked() {
				this.parent = null;
			}
		}
	},
	props: {
		width: {
			type: Number,
			value: 80,
			observer(v) {
				this.refresh('width', v);
			}
		},

		label: {
			type: String,
			value: '',
			observer(v) {
				this.refresh('label', v);
			}
		},

		sortable: {
			type: Boolean,
			value: false,
			observer(v) {
				this.refresh('sortable', v);
			}
		},

		prop: {
			type: String,
			observer(v) {
				this.refresh('prop', v);
			}
		},
		align: {
			type: String,
			observer(v) {
				this.refresh('align', v);
			}
		},
		prefix: {
			type: String,
			value: '',
			observer(v) {
				this.refresh('prefix', v);
			}
		},
		suffix: {
			type: String,
			value: '',
			observer(v) {
				this.refresh('suffix', v);
			}
		},

		prefixStyle: {
			type: String,
			value: '',
			observer(v) {
				this.refresh('prefixStyle', v);
			}
		},
		
		suffixStyle: {
			type: String,
			value: '',
			observer(v) {
				this.refresh('suffixStyle', v);
			}
		},

		headerStyle: {
			type: String,
			observer(v) {
				this.refresh('headerStyle', v);
			}
		},
		cellStyle: {
			type: String,
			observer(v) {
				this.refresh('cellStyle', v);
			}
		},
		renderCell: {
			type: Function,
			// optionalTypes: [String, Array], ~声明后会异常， 如： iOS真机Page中data初始值不能为() => {}, 否者会报t.constructor ...
			observer(v) {
				this.setCellNodes(v);
			}
		},
		renderHeader: {
			type: Function,
			observer(v) {
				this.setHeaderNodes(v);
			}
		}
	},
	data: {
		columnId: '',
		headerId: '',
		cellNodes: [],
		headerNodes: [],
	},
	lifetimes: {
		attached() {
			this.setCellNodes(true);
			this.setHeaderNodes(true);
			
			this.setData({
				columnId: getUid('table-column'),
				headerId: getUid('table-header')
			});
		}
	},
	methods: {
		refresh(key, v) {
			this.parent 
				&& this.parent.refreshColumn(this, key, v);		
		},

		setCellNodes(isInit) {
			let v = this.data.renderCell;

			if (typeof v === 'function') {
				this.refresh('renderCell', v);
			} else if (typeof v === 'object') {
				this.refresh('cellNodes', v);
			} else if (typeof v === 'string') {
				v = this.jsx2vnode(v);
				isInit && this.setData({
					cellNodes: v
				});
				this.refresh('cellNodes', v);
			}

			return v;
		},

		setHeaderNodes(isInit) {
			let v = this.data.renderHeader;
			if (typeof v === 'function') {
				this.refresh('renderHeader', v);
			} else if (typeof v === 'object') {
				this.refresh('headerNodes', v);
			} else if (typeof v === 'string') {
				v = this.jsx2vnode(v);
				isInit && this.setData({
					headerNodes: v
				});
				this.refresh('headerNodes', v);
			}

			return v;
		},

		jsx2vnode(v) {
			return [];
			// return [
			// 	{
			// 		type: 'text',
			// 		attrs: {

			// 		},
			// 		children: '2222'
			// 	},
			// 	{
			// 		type: 'view',
			// 		attrs: {

			// 		},
			// 		children: [
			// 			{
			// 				type: 'text',
			// 				children: '1111'
			// 			},
			// 			{
			// 				type: 'text',
			// 				children: '2222'
			// 			}
			// 		]
			// 	}
			// ];
		}
	}
});

</script>
<style lang="scss">
@import '../common/index.scss';

</style>
<config>
{
	"component": true
}
</config>
