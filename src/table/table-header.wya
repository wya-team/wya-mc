<template>
	<view 
		class="mc-table__thead {{ border ? 'has-border' : ''}} header-class" 
		style="{{ fixed ? '' : scrollWidthStyle }};{{ tHeadStyle }}"
	>
		<block
			wx:for="{{ columns }}"
			wx:for-item="column"  
			wx:for-index="index"  
			wx:key="headerId" 
		>
			<view 
				wx:if="{{ !fixed || column.fixed }}"
				class="mc-table__thead-tr" 
				style="width:  {{ column.realWidth || column.width }}px; {{ tHeadTrStyle }};"
			>
				<view 
					class="mc-table__thead-th is-{{ column.align }}" 
					style="{{ column.headerStyle }}; {{ !fixed && column.fixed ? 'opacity: 0;' : '' }}"
					data-index="{{ index }}"
					data-order="{{ defaultSort.order }}"
					bind:tap="handleHeaderClick"
				>
					<text>{{ column.label }}</text>
					<view wx:if="{{ column.sortable }}" class="mc-table__thead-sortable">
						<mc-icon 
							type="triangle-up" 
							mcStyle="font-size: 20rpx; color: {{ defaultSort.prop === column.prop && defaultSort.order && defaultSort.order === 'ascending' ? '#000' : '#c8c8c8' }}" 
							style="margin-bottom: -10rpx"
						/>
						<mc-icon 
							type="triangle-down" 
							mcStyle="font-size: 20rpx; color: {{ defaultSort.prop === column.prop && defaultSort.order && defaultSort.order === 'descending' ? '#000' : '#c8c8c8' }}" 
							style="margin-top: -10rpx" 
						/>
					</view>
				</view>
			</view>
		</block>
	</view> 
</template>
<script>
import McComponent from '../common/component';
import { getUid } from '../common/utils';

McComponent({
	externalClasses: ['header-row-class-name'], 
	props: {
		border: {
			type: Boolean,
			value: false
		},
		columns: {
			type: Array,
			value: []
		},
		defaultSort: {
			type: Object,
			value: {
				prop: '',
				order: ''
			}
		},
		scrollWidthStyle: {
			type: String,
			value: ''
		},
		tHeadStyle: {
			type: String,
			value: ''
		},
		tHeadTrStyle: {
			type: String,
			value: ''
		},
		fixed: {
			type: Boolean,
			value: false
		}
	},
	lifetimes: {
		ready() {
			this.$emit('ready', this);
		}
	},
	methods: {
		handleHeaderClick(e) {
			let { index, order } = e.currentTarget.dataset;
			const { prop, sortable } = this.data.columns[index];

			if (!sortable) {
				return;
			}
			
			if (this.data.defaultSort.prop !== prop) {
				order = '';
			}

			if (!order) {
				order = 'ascending';
			} else if (order === 'ascending') {
				order = 'descending';
			} else {
				order = '';
			} 

			this.triggerEvent('header-click', { prop, order });
		},

		getHeight() {
			return new Promise((resolve => {
				this.createSelectorQuery()
					.select(`.mc-table__thead`)
					.boundingClientRect((res) => {
						const height = res && res.height || 0;
						resolve(height);
					})
					.exec();
			}));
		}
	}
});

</script>
<style lang="scss">
@import '../common/index.scss';

.mc-table__thead {
	border-bottom: none;
	display: flex;
	justify-content: flex-start;
	align-items: center;
	border-top-right-radius: 8rpx;
	border-top-left-radius: 8rpx;
	overflow: visible;
	color: #666;
	border-bottom: 1px solid #ebeef5;
	box-sizing: border-box;
	font-size: 24rpx;
	font-weight: 400;
	&.has-border {
		.mc-table__thead-tr {
			border-right: 1rpx solid #ebeef5;
		}
		.mc-table__thead-tr:last-child {
			border-right: none;
		}
	}

	&-sortable {
		display: flex;
		flex-direction: column;
		align-items: center;
		margin-top: -5rpx;
		padding: 0 10rpx;
	}

	&-tr {
		font-weight: bold;
		display: inline-block;   
		box-sizing: border-box;
		border-right: 1rpx solid #fff;
		background: white;
		&::last-child {
			border-right: none;
		}
	}

	&-th {
		display: flex;
		align-items: center;
		padding: 20rpx;
		box-sizing: border-box;
		&.is-center {
			justify-content: center;
		}
		&.is-right {
			justify-content: flex-end;
		}
	}
}

</style>
<config>
{
	"component": true,
	"usingComponents": {
		"mc-icon": "../icon/index"
	}
}
</config>
