<template>
	<wxs src="./helper.wxs" module="helper" />
	<view class="mc-table mc-class {{ border ? 'has-border' : ''}} {{ isScrolling ? '' : 'is-scrolling-none' }} {{ !allowScroll || isScrollingEnd ? 'is-scrolling-right-none' : ''}}">
		<view 
			wx:if="{{ doLayouted && headerHeightStyle && helper.hasFixed(columns) }}"
			class="mc-table__fixed"
		>
			<mc-table-header 
				fixed="left"
				header-class="header-class"
				border="{{ border }}"
				columns="{{ columns }}"
				defaultSort="{{ defaultSort }}"
				tHeadStyle="{{ tHeadStyle }}"
				tHeadTrStyle="{{ tHeadTrStyle }};"
				tHeadThStyle="{{ tHeadThStyle }}; {{ headerHeightStyle }}"
				bind:header-click="handleHeaderClick"
			/>
			<mc-table-body 
				fixed="left"
				row-class="row-class"
				cell-class="cell-class"
				dataSource="{{ rebuildData }}"
				border="{{ border }}"
				stripe="{{ stripe }}"
				columns="{{ columns }}"
				tBodyTrStyle="{{ tBodyTrStyle }}"
				tBodyTdStyle="{{ tBodyTdStyle }}"
				bind:row-click="handleRowClick"
			/>
		</view>
		<scroll-view 
			id="{{ tableId }}"
			scroll-x="{{ allowScroll }}" 
			scroll-left="{{ scrollLeft }}"
			style="{{ mcStyle }}"  
			class="mc-table__content"
			bindscroll="handleScroll"
		>
			<mc-table-header 
				wx:if="{{ doLayouted }}"
				header-class="header-class"
				border="{{ border }}"
				columns="{{ columns }}"
				defaultSort="{{ defaultSort }}"
				scrollWidthStyle="{{ scrollWidthStyle }}"
				tHeadStyle="{{ tHeadStyle }}"
				tHeadTrStyle="{{ tHeadTrStyle }};"
				tHeadThStyle="{{ tHeadThStyle }}; {{ headerHeightStyle }}"
				bind:ready="handleHeaderReady"
				bind:header-click="handleHeaderClick"
			/>
			<mc-table-body 
				wx:if="{{ doLayouted }}"
				row-class="row-class"
				cell-class="cell-class"
				dataSource="{{ rebuildData }}"
				border="{{ border }}"
				stripe="{{ stripe }}"
				columns="{{ columns }}"
				scrollWidthStyle="{{ scrollWidthStyle }}"
				tBodyTrStyle="{{ tBodyTrStyle }}"
				tBodyTdStyle="{{ tBodyTdStyle }}"
				bind:ready="handleBodyReady"
				bind:row-click="handleRowClick"
			/>
		</scroll-view>

		<view 
			wx:if="{{ doLayouted && headerHeightStyle && helper.hasRightFixed(columns) }}"
			class="mc-table__fixed-right"
		>
			<mc-table-header 
				fixed="right"
				header-class="header-class"
				border="{{ border }}"
				columns="{{ columns }}"
				defaultSort="{{ defaultSort }}"
				tHeadStyle="{{ tHeadStyle }}"
				tHeadTrStyle="{{ tHeadTrStyle }}"
				tHeadThStyle="{{ tHeadThStyle }}; {{ headerHeightStyle }}"
				bind:header-click="handleHeaderClick"
			/>
			<mc-table-body 
				fixed="right"
				row-class="row-class"
				cell-class="cell-class"
				dataSource="{{ rebuildData }}"
				border="{{ border }}"
				stripe="{{ stripe }}"
				columns="{{ columns }}"
				tBodyTrStyle="{{ tBodyTrStyle }}"
				tBodyTdStyle="{{ tBodyTdStyle }}"
				bind:row-click="handleRowClick"
			/>
		</view>
		<!-- 列表无数据处理 -->
		<view class="mc-table__empty" wx:if="{{ dataSource.length === 0 }}">
			<slot wx:if="{{ useEmptySlot }}" name="empty" />
			<view wx:elif="{{ empty }}">{{ empty }}</view>
		</view>
	</view>
</template>
<script>
import McComponent from '../common/component';
import { getUid } from '../common/utils';

McComponent({
	externalClasses: ['header-class', 'row-class', 'cell-class'], 
	relations: {
		'./table-column': {
			type: 'descendant',
			linked(child) {
				this.children = this.children || [];
				this.children.push(child);

				const { columns } = this.data;
				columns.push(child.data);
				this.setData({ columns });
				this.rebuildWidthRender();

				// size
				this.refreshLayout();
				this.refreshHeaderHeight();
				this.refreshRowsHeight();
			},
			unlinked(child) {
				const index = this.children.findIndex(i => i === child);

				if (index === -1) return;
				this.children.splice(index, 1);

				const { columns } = this.data;
				columns.splice(index, 1);

				this.setData({ columns });
				this.rebuildWidthRender();

				// size
				this.refreshLayout();
				this.refreshHeaderHeight();
				this.refreshRowsHeight();
			}
		}
	},
	props: {
		dataSource: {
			type: Array,
			value: [],
			observer() {
				this.rebuildData();
				this.rebuildWidthRender();

				// row的高度
				this.refreshRowsHeight();
			}
		},
		// table的高度, 溢出可滚动
		height: { 
			type: String,
			value: 'auto'
		},
		width: {
			type: [Number, String],
			value: '100%'
		},
		// 是否带有纵向边框
		stripe: {
			type: Boolean,
			value: false
		},
		// 是否带有纵向边框
		border: {
			type: Boolean,
			value: false
		},
		empty: {
			type: String,
			value: '暂无数据~'
		},
		defaultSort: {
			type: Object,
			value: {
				prop: '',
				order: ''
			}
		},
		tHeadStyle: {
			type: String,
			value: ''
		},
		tHeadTrStyle: {
			type: String,
			value: ''
		},
		tHeadThStyle: {
			type: String,
			value: ''
		},
		tBodyTrStyle: {
			type: String,
			value: ''
		},
		tBodyTdStyle: {
			type: String,
			value: ''
		},
		useEmptySlot: {
			type: Boolean,
			value: false
		}
	},
	data: {
		tableId: '',
		containerWidth: 0,
		contentWidth: 0,
		scrollLeft: 0,
		scrollWidthStyle: 'width: auto',
		headerHeightStyle: '', // 表头的高度
		rowsHeight: [], // 每行的高度
		columns: [],
		rebuildData: [],

		allowScroll: false,
		isScrolling: false,
		isScrollingEnd: false,
		doLayouted: false,
		hasFixed: false
	},
	lifetimes: {
		ready() {
			this.scrollLeft = this.data.scrollLeft;
			this.header = null;

			this.setData({
				tableId: getUid('table'),
			});

			this.$emit('ready', this);
		},
		attached() {
			this.createSelectorQuery()
				.select(`#${this.data.tableId}`)
				.boundingClientRect((res) => {
					const width = (res && res.width) || wx.getSystemInfoSync().windowWidth;
					this.setData({
						containerWidth: width,
						scrollWidthStyle: `width: ${width}px;`
					});
					this.refreshLayout();
				})
				.exec();
		}
	},
	methods: {
		handleRowClick(e) {
			this.triggerEvent('row-click', e.detail);
		},

		handleHeaderReady(e) {
			this.header = e.detail;
			this.refreshHeaderHeight();
		},

		handleBodyReady(e) {
			this.body = e.detail;
			this.refreshRowsHeight();
		},

		handleHeaderClick(e) {
			const { prop, order } = e.detail;

			// TODO: 内部提取，修改了父层
			this.setData({
				defaultSort: {
					prop,
					order
				}
			});

			this.triggerEvent('sort-change', { prop, order });
		},

		/**
		 * 这个值不能实时设置，iOS真机会抖动
		 */
		handleScroll(e) {
			this.scrollLeft = e.detail.scrollLeft;

			this.setData({
				isScrolling: e.detail.scrollLeft != 0,
				isScrollingEnd: this.data.contentWidth - this.data.containerWidth === e.detail.scrollLeft
			});
		},

		refreshColumn(child, k, v) {
			const index = this.children.findIndex(i => i === child);

			if (index === -1) return;

			this.setData({
				[`columns[${index}].${k}`]: v
			});

			this.rebuildWidthRender();

			this.refreshLayout();
			this.refreshHeaderHeight();
			this.refreshRowsHeight();
		},

		refreshLayout() {
			if (!this.data.containerWidth) return;
			const width = this.data.columns.reduce((pre, cur) => {
				 pre += cur.width;
				 return pre;
			}, 0);

			if (width > this.data.containerWidth) {
				this.setData({
					allowScroll: true,
					contentWidth: width,
					scrollWidthStyle: `width: ${width}px;`
				});
			} else {
				let levelWidth = this.data.containerWidth - width;
				let states = {};
				this.data.columns.forEach((item, index) => {
					states[`columns[${index}].realWidth`] = (item.width) + levelWidth * (item.width / this.data.containerWidth);
				});

				states.contentWidth = this.data.containerWidth;
				this.setData(states);
			}

			this.setData({
				doLayouted: true
			});
		},

		async refreshHeaderHeight() {
			if (!this.header) return;
			const height = await this.header.getHeight();
			this.setData({
				headerHeightStyle: `height: ${height}px;`
			});
		},


		async refreshRowsHeight() {
			if (!this.body) return;
			const rowsHeight = await this.body.getRowsHeight();

			const states = rowsHeight.reduce((pre, currentHeight, index) => {
				pre[`rebuildData[${index}].heightStyle`] = `height: ${currentHeight ? `${currentHeight}px` : 'auto'};`;
				return pre;
			}, {});

			this.setData(states);
		},

		rebuildData() {
			const { dataSource } = this.data;
			this.setData({
				rebuildData: dataSource,
			});

			// 让滚动条回到原来的位置
			wx.nextTick(() => {
				this.scrollLeft && this.setData({
					scrollLeft: this.scrollLeft
				});
			});
		},

		rebuildWidthRender() {
			const { columns, rebuildData } = this.data;
			if (!columns.some(i => (typeof i.renderCell == 'function' || typeof i.renderHeader == 'function'))) return;

			const states = {};
			rebuildData.forEach((row, rowIndex) => {
				rebuildData[rowIndex]._renders = {
					cell: {},
					header: {}
				};
				columns.forEach((column, columnIndex) => {
					if (typeof column.renderCell === 'function') {
						states[`rebuildData[${rowIndex}]._renders.cell[${columnIndex}]`] = column.renderCell({
							row,
							column,
							rowIndex,
							columnIndex
						}) || '';
					}
				});
			});

			this.setData(states);
		}
	}
});

</script>
<style lang="scss">
@import '../common/index.scss';

.mc-table {
	position: relative;
	font-size: 28rpx;
	background: #fff;
	box-sizing: border-box;
	&.has-border {
		border-top: 1rpx solid #ebeef5;
		border-bottom: 1rpx solid #ebeef5;
	}
	&.is-scrolling-none {
		.mc-table__fixed {
			box-shadow: none;
		}
	}
	&.is-scrolling-right-none {
		.mc-table__fixed-right {
			box-shadow: none;
		}
	}
	&__content {
		position: relative;
		width: 100%; 
	}

	&__empty {
		display: flex;
		flex-direction: column;
		padding: 50rpx;
		background: #fff;  
		color: #666;
		justify-content: center;
		align-items: center;
	}

	&__fixed {
		position: absolute; 
		left: 0; 
		top: 0;
		z-index: 1;
		box-sizing: border-box;
		box-shadow: 0 0 10px rgba(0, 0, 0, 0.12);
		transition: box-shadow 0.25s ease;
	}
	&__fixed-right {
		position: absolute; 
		right: 0; 
		top: 0;
		z-index: 1;
		box-sizing: border-box;
		box-shadow: 0 0 10px rgba(0, 0, 0, 0.12);
		transition: box-shadow 0.25s ease;
	}
}

</style>
<config>
{
	"component": true,
	"usingComponents": {
		"mc-table-header": "./table-header",
		"mc-table-body": "./table-body"
	}
}
</config>
