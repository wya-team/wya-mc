<template>
	<wxs src="./helper.wxs" module="helper" />
	<scroll-view 
		id="{{ tableId }}"
		scroll-x="{{ scrollX }}" 
		style="{{ mcStyle }}"  
		class="mc-table mc-class"
	>
		<!-- 表格头 start -->
		<view 
			wx:if="{{ doLayouted }}"
			class="mc-table__thead {{ border ? 'has-border' : ''}} header-row-class-name" 
			style="{{ scrollWidthStyle }}"
		>
			<view 
				wx:for="{{ columns }}"
				wx:for-item="column"  
				wx:for-index="index"  
				wx:key="headerId" 
				class="mc-table__thead-td" 
				style="width:  {{ column.realWidth || column.width }}px;"
			>
				<view 
					class="mc-table__header is-{{ column.align }}" 
					style="{{ column.headerStyle }}"
					data-index="{{ index }}"
					data-order="{{ defaultSort.order }}"
					bind:tap="handleHeaderClick"
				>
					<text>{{ column.label }}</text>
					<view class="mc-table__sortable">
						<mc-icon 
							type="triangle-up" 
							mcStyle="font-size: 20rpx; color: {{ defaultSort.prop === column.prop && defaultSort.order && defaultSort.order === 'ascending' ? '#000' : '#999' }}" 
							style="margin-bottom: -12rpx"
						/>
						<mc-icon 
							type="triangle-down" 
							mcStyle="font-size: 20rpx; color: {{ defaultSort.prop === column.prop && defaultSort.order && defaultSort.order === 'descending' ? '#000' : '#999' }}" 
							style="margin-top: -12rpx" 
						/>
					</view>
				</view>
			</view>
		</view>  
		<!-- 表格头 end -->
		
		<!-- 表格体 start -->
		<view 
			wx:if="{{ doLayouted }}"
			class="mc-table__tbody"
			style="{{ scrollWidthStyle  }}; height:{{ height ? height : 'auto' }};" 
		>
			<block 
				wx:if="{{ rebuildData.length > 0 }}" 
				wx:for-item="row" 
				wx:for-index="index"
				wx:for="{{ rebuildData }}" 
				wx:key="index" 
			>
				<view class="mc-table__tbody-tr {{ stripe ? 'has-stripe' : '' }} {{ border ? 'has-border' : ''}} row-class-name">
					<view 
						wx:for="{{ columns }}" 
						wx:for-item="column" 
						wx:for-index="$index" 
						wx:key="columnId" 
						class="mc-table__tbody-td is-{{ column.align }} cell-class-name" 
						data-row="{{ dataSource[index] }}" 
						data-row-index="{{ index }}" 
						data-column="{{ column }}"
						data-column-index="{{ $index }}"
						style="width: {{ column.realWidth || column.width }}px; {{ column.cellStyle }}" 
						bind:tap="handleRowClick"
					>	
						<!-- 目前wxs和template不支持传递func -->
						<rich-text 
							wx:if="{{ rebuildData[index]._renders.cell[$index] }}"
							nodes="{{ rebuildData[index]._renders.cell[$index] }}" 
						/>
						<mc-table-cell 
							wx:elif="{{ helper.isVNodes(column.renderCell) }}" 
							nodes="{{ column.cellNodes }}"
							row="{{ dataSource[index] }}"
							rowIndex="{{ index }}"
							columnIndex="{{ $index }}"
							level="{{ 1 }}"
						/>
						<text wx:else>{{ row[column.prop] }}</text>
					</view>        
				</view>
			</block>
		</view>
		<!-- 表格体 end -->
	</scroll-view>
	<!-- 列表无数据处理 -->
	<view class="mc-table__empty" wx:if="{{ dataSource.length === 0 }}">
		<slot name="empty" />
		<view wx:if="{{ empty }}">{{ empty }}</view>
	</view>
</template>
<script>
import McComponent from '../common/component';
import { getUid } from '../common/utils';

McComponent({
	externalClasses: ['header-row-class-name', 'row-class-name', 'cell-class-name'], 
	relations: {
		'./table-column': {
			type: 'descendant',
			linked(child) {
				this.children = this.children || [];
				this.children.push(child);

				const { columns } = this.data;
				columns.push(child.data);
				this.setData({ columns });
				this.refreshLayout();
				this.rebuildWidthRender();
			},
			unlinked(child) {
				const index = this.children.findIndex(i => i === child);

				if (index === -1) return;
				this.children.splice(index, 1);

				const { columns } = this.data;
				columns.splice(index, 1);

				this.setData({ columns });
				this.refreshLayout();
				this.rebuildWidthRender();
			}
		}
	},
	props: {
		dataSource: {
			type: Array,
			value: [],
			observer() {
				this.rebuildData();
				this.rebuildWidthRender();
			}
		},
		// table的高度, 溢出可滚动
		height: { 
			type: String,
			value: 'auto'
		},
		width: {
			type: [Number, String],
			value: '100%'
		},
		// 是否带有纵向边框
		stripe: {
			type: Boolean,
			value: false
		},
		// 是否带有纵向边框
		border: {
			type: Boolean,
			value: false
		},
		empty: {
			type: String,
			value: '暂无数据~'
		},
		defaultSort: {
			type: Object,
			value: {
				prop: '',
				order: ''
			}
		}
	},
	data: {
		tableId: '',
		containerWidth: 0,
		scrollX: false,
		scrollWidthStyle: 'width: auto',
		doLayouted: false,
		columns: [],
		rebuildData: []
	},
	lifetimes: {
		ready() {
			this.setData({
				tableId: getUid('table'),
			});

			this.createSelectorQuery()
				.select(`#${this.data.tableId}`)
				.boundingClientRect((res) => {
					this.setData({
						containerWidth: res.width,
						scrollWidthStyle: `width: ${res.width}px;`
					});
					this.refreshLayout();
				})
				.exec();

			this.$emit('ready', this);
		}
	},
	methods: {
		handleRowClick(e) {
			this.triggerEvent('row-click', e.currentTarget.dataset);
		},

		handleHeaderClick(e) {
			let { index, order } = e.currentTarget.dataset;
			const { prop } = this.data.columns[index];

			if (this.data.defaultSort.prop !== prop) {
				order = '';
			}

			if (!order) {
				order = 'ascending';
			} else if (order === 'ascending') {
				order = 'descending';
			} else {
				order = '';
			} 

			// TODO: 内部提取，修改了父层
			this.setData({
				defaultSort: {
					prop,
					order
				}
			});

			this.triggerEvent('sort-change', { prop, order });
		},

		refreshColumn(child, k, v) {
			const index = this.children.findIndex(i => i === child);

			if (index === -1) return;

			this.setData({
				[`columns[${index}].${k}`]: v
			});

			this.refreshLayout();
			this.rebuildWidthRender();
		},

		refreshLayout() {
			if (!this.data.containerWidth) return;
			const width = this.data.columns.reduce((pre, cur) => {
				 pre += cur.width;
				 return pre;
			}, 0);

			if (width > this.data.containerWidth) {
				this.setData({
					scrollX: true,
					scrollWidthStyle: `width: ${width}px;`
				});
			} else {
				let levelWidth = this.data.containerWidth - width;
				this.data.columns.forEach((item, index) => {
					this.setData({
						[`columns[${index}].realWidth`]: (item.width) + levelWidth * (item.width / this.data.containerWidth) 
					});
				});
			}

			this.setData({
				doLayouted: true
			});
		},

		rebuildData() {
			const { dataSource } = this.data;
			this.setData({
				rebuildData: dataSource
			});
		},

		rebuildWidthRender() {
			const { columns, rebuildData } = this.data;
			if (!columns.some(i => (typeof i.renderCell == 'function' || typeof i.renderHeader == 'function'))) return;

			rebuildData.forEach((row, rowIndex) => {
				rebuildData[rowIndex]._renders = {
					cell: {},
					header: {}
				};
				columns.forEach((column, columnIndex) => {
					if (typeof column.renderCell === 'function') {
						this.setData({
							[`rebuildData[${rowIndex}]._renders.cell[${columnIndex}]`]: column.renderCell({
								row,
								column,
								rowIndex,
								columnIndex
							}) || ''
						});
					}
				});
			});
		}
	}
});

</script>
<style lang="scss">
@import '../common/index.scss';

.mc-table {
	position: relative;
	font-size: 28rpx;
	background: #fff;  
	width: 100%; 
	&__thead {
		border-bottom: none;
		display: flex;
		justify-content: flex-start;
		border-top-right-radius: 8rpx;
		border-top-left-radius: 8rpx;
		overflow: visible;
		color: #909399;
		border: 1px solid #ebeef5;
		box-sizing: border-box;
		&.has-border {
			.mc-table__thead-td {
				border-right: 1rpx solid #ebeef5;
			}
			.mc-table__thead-td:last-child {
				border-right: none;
			}
		}
	}
	&__thead-td {
		padding: 20rpx 10rpx;
		font-weight: bold;
		display: inline-block;   
		
		border-right: 1rpx solid #fff;
		&::last-child {
			border-right: none;
		}
	}

	&__tbody {
		box-sizing: border-box;
		font-size: 28rpx;
		color: #666;
		border: 1px solid #ebeef5;
		border-top: none;
		border-bottom-left-radius: 8rpx;
		border-bottom-right-radius: 8rpx;

	}
	&__tbody-tr {
		display: flex;
		border-bottom: 1px solid #ebeef5;
		&::last-child {
			border-bottom-left-radius: 8rpx;
			border-bottom-right-radius: 8rpx;
		}
		&.has-stripe {
			background: #fff;
			border-bottom: none;
			&:nth-child(2n) {
				background: #F6F6F6;
			}
		}
		&.has-border {
			.mc-table__tbody-td {
				border-right: 1rpx solid #F6F6F6;
			}
			.mc-table__tbody-td:last-child {  
				border-right: none;
			}
		}
	}

	&__tbody-td {
		white-space: wrap;
		padding: 20rpx 10rpx;
		&.is-center {
			text-align: center;
		}
		&.is-right {
			text-align: right;
		}
	}

	&__header {
		display: flex;
		align-items: center;
		&.is-center {
			justify-content: center;
		}
		&.is-right {
			justify-content: flex-end;
		}
	}

	&__sortable {
		display: flex;
		flex-direction: column;
		align-items: center;
		margin-top: -5rpx;
	}

	&__empty {
		display: flex;
		flex-direction: column;
		padding: 50rpx;
		background: #fff;  
		color: #666;
		justify-content: center;
		align-items: center;
	}
}

</style>
<config>
{
	"component": true,
	"usingComponents": {
		"mc-icon": "../icon/index",
		"mc-table-cell": "./table-cell"
	}
}
</config>
