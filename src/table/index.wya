<template>
	<wxs src="./helper.wxs" module="helper" />
	<view 
		class="mc-table mc-class {{ border ? 'has-border' : ''}} {{ isScrolling ? '' : 'is-scrolling-none' }} {{ !allowScroll || isScrollingEnd ? 'is-scrolling-right-none' : ''}}"
		id="{{ tableId }}"
	>
		<!-- TODO: sticky需要mc-sticky支持placeholder -->
		<!-- sticky 代理滑动有延迟，且无法弹性，为了更好的效果，普通模式下不走代理滑动 -->
		<!-- 如果在scroll-view将会无效（如不能套在recycle-list里），需要在页面级滚动 -->
		<mc-sticky wx:if="{{ sticky }}" mc-class="mc-table__header" offsetTop="{{ offsetTop }}" placeholder>
			<view 
				wx:if="{{ doLayouted && headerHeightStyle && helper.hasFixed(columns) }}"
				class="mc-table__fixed"
			>
				<mc-table-header 
					fixed="left"
					header-class="header-class"
					border="{{ border }}"
					columns="{{ columns }}"
					defaultSort="{{ defaultSort }}"
					tHeadStyle="{{ tHeadStyle }}"
					tHeadTrStyle="{{ tHeadTrStyle }};"
					tHeadThStyle="{{ tHeadThStyle }}; {{ headerHeightStyle }}"
					bind:header-click="handleHeaderClick"
				/>
			</view>

			<scroll-view 
				id="{{ tableHeaderId }}"
				scroll-x="{{ allowScroll }}" 
				scroll-left="{{ scrollHeaderLeft }}"
				style="{{ mcStyle }}"  
				class="mc-table__scroll-view"
				data-trigger="{{ tableBodyId }}"
				data-delegate="scrollHeaderLeft"
				binddragstart="handleScroll"
			>
				<mc-table-header 
					wx:if="{{ doLayouted }}"
					header-class="header-class"
					border="{{ border }}"
					columns="{{ columns }}"
					defaultSort="{{ defaultSort }}"
					containerWidthStyle="{{ containerWidthStyle }}"
					tHeadStyle="{{ tHeadStyle }}"
					tHeadTrStyle="{{ tHeadTrStyle }};"
					tHeadThStyle="{{ tHeadThStyle }}; {{ headerHeightStyle }}"
					bind:ready="handleHeaderReady"
					bind:header-click="handleHeaderClick"
				/>
			</scroll-view>

			<view 
				wx:if="{{ doLayouted && headerHeightStyle && helper.hasRightFixed(columns) }}"
				class="mc-table__fixed-right"
			>
				<mc-table-header 
					fixed="right"
					header-class="header-class"
					border="{{ border }}"
					columns="{{ columns }}"
					defaultSort="{{ defaultSort }}"
					tHeadStyle="{{ tHeadStyle }}"
					tHeadTrStyle="{{ tHeadTrStyle }}"
					tHeadThStyle="{{ tHeadThStyle }}; {{ headerHeightStyle }}"
					bind:header-click="handleHeaderClick"
				/>
			</view>
		</mc-sticky>
		<view class="mc-table__body">
			<view 
				wx:if="{{ doLayouted && headerHeightStyle && helper.hasFixed(columns) }}"
				class="mc-table__fixed"
			>
				<mc-table-header 
					wx:if="{{ !sticky }}"
					fixed="left"
					header-class="header-class"
					border="{{ border }}"
					columns="{{ columns }}"
					defaultSort="{{ defaultSort }}"
					tHeadStyle="{{ tHeadStyle }}"
					tHeadTrStyle="{{ tHeadTrStyle }};"
					tHeadThStyle="{{ tHeadThStyle }}; {{ headerHeightStyle }}"
					bind:header-click="handleHeaderClick"
				/>
				<mc-table-body 
					fixed="left"
					row-class="row-class"
					cell-class="cell-class"
					dataSource="{{ rebuildData }}"
					border="{{ border }}"
					stripe="{{ stripe }}"
					columns="{{ columns }}"
					tBodyTrStyle="{{ tBodyTrStyle }}"
					tBodyTdStyle="{{ tBodyTdStyle }}"
					bind:row-click="handleRowClick"
				/>
			</view>

			<scroll-view 
				id="{{ tableBodyId }}"
				scroll-x="{{ allowScroll }}" 
				scroll-left="{{ scrollBodyLeft }}"
				style="{{ mcStyle }}"  
				class="mc-table__scroll-view"
				data-trigger="{{ tableHeaderId }}"
				data-delegate="scrollHeaderLeft"
				bindscroll="handleScroll"
			>
				<mc-table-header 
					wx:if="{{ !sticky && doLayouted }}"
					header-class="header-class"
					border="{{ border }}"
					columns="{{ columns }}"
					defaultSort="{{ defaultSort }}"
					containerWidthStyle="{{ containerWidthStyle }}"
					tHeadStyle="{{ tHeadStyle }}"
					tHeadTrStyle="{{ tHeadTrStyle }};"
					tHeadThStyle="{{ tHeadThStyle }}; {{ headerHeightStyle }}"
					bind:ready="handleHeaderReady"
					bind:header-click="handleHeaderClick"
				/>
				<mc-table-body 
					wx:if="{{ doLayouted }}"
					row-class="row-class"
					cell-class="cell-class"
					dataSource="{{ rebuildData }}"
					border="{{ border }}"
					stripe="{{ stripe }}"
					columns="{{ columns }}"
					containerWidthStyle="{{ containerWidthStyle }}"
					tBodyTrStyle="{{ tBodyTrStyle }}"
					tBodyTdStyle="{{ tBodyTdStyle }}"
					bind:ready="handleBodyReady"
					bind:row-click="handleRowClick"
				/>
			</scroll-view>

			<view 
				wx:if="{{ doLayouted && headerHeightStyle && helper.hasRightFixed(columns) }}"
				class="mc-table__fixed-right"
			>
				<mc-table-header 
					wx:if="{{ !sticky }}"
					fixed="right"
					header-class="header-class"
					border="{{ border }}"
					columns="{{ columns }}"
					defaultSort="{{ defaultSort }}"
					tHeadStyle="{{ tHeadStyle }}"
					tHeadTrStyle="{{ tHeadTrStyle }}"
					tHeadThStyle="{{ tHeadThStyle }}; {{ headerHeightStyle }}"
					bind:header-click="handleHeaderClick"
				/>
				<mc-table-body 
					fixed="right"
					row-class="row-class"
					cell-class="cell-class"
					dataSource="{{ rebuildData }}"
					border="{{ border }}"
					stripe="{{ stripe }}"
					columns="{{ columns }}"
					tBodyTrStyle="{{ tBodyTrStyle }}"
					tBodyTdStyle="{{ tBodyTdStyle }}"
					bind:row-click="handleRowClick"
				/>
			</view>
		</view>
		<!-- 列表无数据处理 -->
		<view class="mc-table__empty" wx:if="{{ dataSource.length === 0 }}">
			<slot wx:if="{{ useEmptySlot }}" name="empty" />
			<view wx:elif="{{ empty }}">{{ empty }}</view>
		</view>
	</view>
</template>
<script>
import McComponent from '../common/component';
import { getUid } from '../common/utils';

McComponent({
	externalClasses: ['header-class', 'row-class', 'cell-class'], 
	relations: {
		'./table-column': {
			type: 'descendant',
			linked(child) {
				this.children = this.children || [];
				this.children.push(child);

				const { columns } = this.data;
				columns.push(child.data);
				this.setData({ columns });
				this.rebuildWidthRender();
				this.refreshLayout();
			},
			unlinked(child) {
				const index = this.children.findIndex(i => i === child);

				if (index === -1) return;
				this.children.splice(index, 1);

				const { columns } = this.data;
				columns.splice(index, 1);

				this.setData({ columns });
				this.rebuildWidthRender();
				this.refreshLayout();
			}
		}
	},
	props: {
		/**
		 * 仅用于父层display: none变化的场景 
		 * 
		 * 注意，如果使用mc-tabs, 一开始为display: none, 所有高宽计算均为0;
		 * 可以通过该字段来触发布局刷新
		 * 同recycle-list
		 */
		show: {
			type: Boolean,
			value: true,
			observer(v) {
				v && this.refreshContainerWidth().then(() => {
					this.refreshLayout();
				});
			}
		},
		sticky: {
			type: Boolean,
			value: false
		},
		offsetTop: {
			type: Number
		},
		dataSource: {
			type: Array,
			value: [],
			observer() {
				this.rebuildData();
				this.rebuildWidthRender();

				// row的高度
				this.refreshRowsHeight();
			}
		},
		// table的高度, 溢出可滚动
		height: { 
			type: String,
			value: 'auto'
		},
		width: {
			type: [Number, String],
			value: '100%'
		},
		// 是否带有纵向边框
		stripe: {
			type: Boolean,
			value: false
		},
		// 是否带有纵向边框
		border: {
			type: Boolean,
			value: false
		},
		empty: {
			type: String,
			value: '暂无数据~'
		},
		defaultSort: {
			type: Object,
			value: {
				prop: '',
				order: ''
			}
		},
		tHeadStyle: {
			type: String,
			value: ''
		},
		tHeadTrStyle: {
			type: String,
			value: ''
		},
		tHeadThStyle: {
			type: String,
			value: ''
		},
		tBodyTrStyle: {
			type: String,
			value: ''
		},
		tBodyTdStyle: {
			type: String,
			value: ''
		},
		useEmptySlot: {
			type: Boolean,
			value: false
		}
	},
	data: {
		tableId: '',
		tableHeaderId: '',
		tableBodyId: '',

		scrollBodyLeft: 0,
		scrollHeaderLeft: 0,

		containerWidth: 0,
		containerWidthStyle: 'width: auto',
		contentWidth: 0,
		headerHeight: 0,
		headerHeightStyle: '', // 表头的高度
		rowsHeight: [], // 每行的高度
		columns: [],
		rebuildData: [],

		allowScroll: false,
		isScrolling: false,
		isScrollingEnd: false,
		doLayouted: false,
		hasFixed: false
	},
	lifetimes: {
		attached() {
			this.scrollLeft = this.data.scrollBodyLeft;
			this.header = null;

			this.setData({
				tableId: getUid('table'),
				tableHeaderId: getUid('table-header'),
				tableBodyId: getUid('table-body'),
			});

			this.refreshContainerWidth().then(() => {
				this.refreshColumnsWidth();
			});
		},
		ready() {
			this.$emit('ready', this);
		}
	},
	methods: {
		handleRowClick(e) {
			this.triggerEvent('row-click', e.detail);
		},

		handleHeaderReady(e) {
			this.header = e.detail;
			this.refreshHeaderHeight();
		},

		handleBodyReady(e) {
			this.body = e.detail;
			this.refreshRowsHeight();
		},

		handleHeaderClick(e) {
			const { prop, order } = e.detail;

			// TODO: 内部提取，修改了父层
			this.setData({
				defaultSort: {
					prop,
					order
				}
			});

			this.triggerEvent('sort-change', { prop, order });
		},

		/**
		 * 1. 开启enhanced，控制scrollTo，造成抖动严重
		 * 2. binddragging控制没有scroll效果明显
		 * @return {[type]}   [description]
		 */
		handleScroll(e) {
			const { trigger, delegate } = e.currentTarget.dataset;

			this.scrollLeft = e.detail.scrollLeft; // 这个值不能实时设置，iOS真机会抖动
			let states = {
				isScrolling: e.detail.scrollLeft != 0,
				isScrollingEnd: this.data.contentWidth - this.data.containerWidth === e.detail.scrollLeft
			};

			if (this.data.sticky) {
				states[delegate] = e.detail.scrollLeft;
			}
			
			this.setData(states);
		},

		refreshColumn(child, k, v) {
			const index = this.children.findIndex(i => i === child);

			if (index === -1) return;

			this.setData({
				[`columns[${index}].${k}`]: v
			});

			this.rebuildWidthRender();
			this.refreshLayout();
		},

		rebuildData() {
			const { dataSource } = this.data;
			this.setData({
				rebuildData: dataSource,
			});

			// 让滚动条回到原来的位置
			wx.nextTick(() => {
				this.scrollLeft && this.setData({
					scrollLeft: this.scrollLeft,
					scrollBodyLeft: this.scrollLeft,
					scrollHeaderLeft: this.scrollLeft
				});
			});
		},

		rebuildWidthRender() {
			const { columns, rebuildData } = this.data;
			if (!columns.some(i => (typeof i.renderCell == 'function' || typeof i.renderHeader == 'function'))) return;

			const states = {};
			rebuildData.forEach((row, rowIndex) => {
				rebuildData[rowIndex]._renders = {
					cell: {},
					header: {}
				};
				columns.forEach((column, columnIndex) => {
					if (typeof column.renderCell === 'function') {
						states[`rebuildData[${rowIndex}]._renders.cell[${columnIndex}]`] = column.renderCell({
							row,
							column,
							rowIndex,
							columnIndex
						}) || '';
					}
				});
			});

			this.setData(states);
		},

		/**
		 * 刷新布局
		 */
		refreshLayout() {
			this.refreshColumnsWidth();
			this.refreshHeaderHeight();
			this.refreshRowsHeight();
		},

		/**
		 * 刷新初始化显示隐藏宽度的变化（父层display:none时，res是null的问题）
		 */
		refreshContainerWidth() {
			let asyncA = new Promise((resolve) => {
				this.createSelectorQuery()
					.select(`#${this.data.sticky ? this.data.tableHeaderId : this.data.tableBodyId}`)
					.boundingClientRect((res) => {
						const width = (res && res.width) || wx.getSystemInfoSync().windowWidth;
						this.setData({
							containerWidth: width,
							containerWidthStyle: `width: ${width}px;`
						});

						resolve();
					})
					.exec();
			});
			let asyncB = new Promise(_ => setTimeout(_, 1000));
			return Promise.race([asyncA, asyncB]);
		},

		/**
		 * 计算每列的宽度
		 */
		refreshColumnsWidth() {
			if (!this.data.containerWidth) return;
			const width = this.data.columns.reduce((pre, cur) => {
				 pre += cur.width;
				 return pre;
			}, 0);

			if (width > this.data.containerWidth) {
				this.setData({
					allowScroll: true,
					contentWidth: width,
					containerWidthStyle: `width: ${width}px;`
				});
			} else {
				let levelWidth = this.data.containerWidth - width;
				let states = {};
				this.data.columns.forEach((item, index) => {
					states[`columns[${index}].realWidth`] = (item.width) + levelWidth * (item.width / width);
				});

				states.contentWidth = this.data.containerWidth;
				this.setData(states);
			}

			this.setData({ doLayouted: true });
		},

		/**
		 * 计算表头高度
		 */
		async refreshHeaderHeight() {
			if (!this.header) return;
			const height = await this.header.getHeight();

			if (this.data.headerHeight === height) return;
			this.setData({
				headerHeight: height,
				headerHeightStyle: `height: ${height ? `${height}px` : 'auto'};`
			});
		},

		/**
		 * 计算每行高度
		 */
		async refreshRowsHeight() {
			if (!this.body) return;
			const rowsHeight = await this.body.getRowsHeight();

			const states = rowsHeight.reduce((pre, currentHeight, index) => {
				pre[`rebuildData[${index}].heightStyle`] = `height: ${currentHeight ? `${currentHeight}px` : 'auto'};`;
				return pre;
			}, {});

			this.setData(states);
		},
	}
});

</script>
<style lang="scss">
@import '../common/index.scss';

.mc-table {
	position: relative;
	font-size: 28rpx;
	background: #fff;
	box-sizing: border-box;
	&.has-border {
		border-top: 1rpx solid #ebeef5;
		border-bottom: 1rpx solid #ebeef5;
	}
	&.is-scrolling-none {
		.mc-table__fixed {
			box-shadow: none;
		}
	}
	&.is-scrolling-right-none {
		.mc-table__fixed-right {
			box-shadow: none;
		}
	}

	&__header {
		position: relative;
		box-sizing: border-box;
	}

	&__body {
		position: relative;
		box-sizing: border-box;
	}

	&__scroll-view {
		position: relative;
		width: 100%; 
	}

	&__empty {
		display: flex;
		flex-direction: column;
		padding: 50rpx;
		background: #fff;  
		color: #666;
		justify-content: center;
		align-items: center;
	}

	&__fixed {
		position: absolute; 
		left: 0; 
		top: 0;
		z-index: 1;
		box-sizing: border-box;
		box-shadow: 10rpx 0rpx 10rpx -10rpx rgba(0, 0, 0, 0.12);
		transition: box-shadow 0.25s ease;
	}
	&__fixed-right {
		position: absolute; 
		right: 0; 
		top: 0;
		z-index: 1;
		box-sizing: border-box;
		box-shadow: -10rpx 0rpx 10rpx -10rpx rgba(0, 0, 0, 0.12);
		transition: box-shadow 0.25s ease;
	}
}

</style>
<config>
{
	"component": true,
	"usingComponents": {
		"mc-sticky": "../sticky/index",
		"mc-table-header": "./table-header",
		"mc-table-body": "./table-body"
	}
}
</config>
