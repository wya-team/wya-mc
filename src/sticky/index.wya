<template>
<view 
	class="mc-sticky" 
	style="{{ computed.containerStyle({ fixed, height, zIndex }) }}"
>
	<view 
  		class="{{ fixed ? 'mc-sticky__fixed' : '' }}" 
		style="{{ computed.wrapStyle({ fixed, offsetTop }) }}"
	>
    	<slot/>
	</view>
</view>

<wxs module="computed">
	function wrapStyle(data) {
		if (data.fixed) {
			return 'top: ' + data.offsetTop + 'px;'
		}
		return ''
	}

	function containerStyle(data) {
		if (data.fixed) {
			return 'height: ' + data.height + 'px; z-index: ' + data.zIndex + ';'
		}
		return ''
	}

	module.exports = {
		wrapStyle: wrapStyle,
		containerStyle: containerStyle
	}
</wxs>
</template>

<script>
import McComponent from '../common/component';

const TARGET_CLASS_NAME = '.mc-sticky';

McComponent({
	options: {
		pureDataPattern: /^_/
	},
	properties: {
		offsetTop: {
			type: Number,
			value: 0
		},
		zIndex: {
			type: Number,
			value: 99
		},
		disabled: {
			type: Boolean,
			value: false
		}
	},
	data: {
		fixed: false,
		height: 0,
		_attached: false,
	},
	observers: {
		disabled(newVal) {
			if (!this.data._attached) return;
			newVal ? this.disconnectObserver() : this.initObserver();
		},
		offsetTop(newVal) {
			if (typeof newVal !== 'number' || !this.data._attached) return;
			this.initObserver();
		}
	},
	lifetimes: {
		attached() {
			this.data._attached = true;
			if (!this.data.disabled) this.initObserver();
		},
		detached() {
			this.data._attached = false;
			this.disconnectObserver();
		}
	},
	methods: {
		initObserver() {
			this.disconnectObserver();
			this.getRect(TARGET_CLASS_NAME).then(rect => {
				this.setData({ height: rect.height });
				this.observerContent();
			});
		},
		disconnectObserver(observerName) {
			if (observerName) {
				let observer = this[observerName];
				observer && observer.disconnect();
			} else {
				this.contentObserver && this.contentObserver.disconnect();
			}
		},
		observerContent() {
			const { offsetTop } = this.data;
			this.disconnectObserver('contentObserver');
			let contentObserver = this.createIntersectionObserver({
				thresholds: [1],
				initialRatio: 1
			});
			contentObserver.relativeToViewport({ top: -offsetTop });
			contentObserver.observe(TARGET_CLASS_NAME, res => {
				if (this.data.disabled) return;
				this.setFixed(res.boundingClientRect.top, res.intersectionRatio);
			});
			this.contentObserver = contentObserver;
		},
		setFixed(top, intersectionRatio) {
			const fixed = intersectionRatio < 1;
			this.triggerEvent('scroll', {
				scrollTop: top,
				isFixed: fixed
			});
			this.setData({ fixed });
		},
		getRect(selector) {
			return new Promise((resolve, reject) => {
				this.createSelectorQuery()
					.select(selector)
					.boundingClientRect(rect => {
						if (rect) {
							resolve(rect);
						} else {
							reject(new Error(`can not find selector: "${selector}"`));
						}
					})
					.exec();
			});
		}
	}
});
</script>

<style lang="scss">
.mc-sticky {
	position:relative
}
.mc-sticky__fixed {
	position: fixed;
	left:0;
	top:0;
	right:0
}
</style>

<config>
{
	"component": true,
	"usingComponents": {}
}
</config>
