<template>
	<view class="mc-video mc-class" style="{{ mcStyle }}">
		<!-- 在失败后点击视频播放，默认自动播放 -->
		<video
			wx:if="{{ (!hasLoadFail && hasTryLoad) || (hasLoadFail && hasClick) }}"
			wx:key="{{ elementId }}"
			id="{{ elementId }}"
			class="is-tag-video"
			src="{{ src }}"
			autoplay="{{ autoplay || (hasLoadFail && hasClick) }}"
			showCenterPlayBtn="{{ showCenterPlayBtn }}"
			poster="{{ poster }}"
			controls="{{ controls }}"
			showMuteBtn="{{ showMuteBtn }}"
			showPlayBtn="{{ showPlayBtn }}"
			showFullscreenBtn="{{ showFullscreenBtn }}"
			pictureInPictureMode="{{ pictureInPictureMode }}"
			binderror="handleError"
			bindloadedmetadata="handleLoadMetaData"
			bind:play="handleStartPlay"
		/>
		<view
			wx:else
			class="mc-video__placeholder"
			bind:tap="handlePlay"
		>
			<mc-spin
				wx:if="{{ !hasLoadFail }}"
				color="#ffffff"
				size="{{ spinOpts.size }}"
			/>
			<view
				wx:else
				class="is-tag-div"
				style="{{ playStyle }}"
			/>
		</view>
	</view>
</template>
<script>
import McComponent from '../common/component';
/**
 * 用于解决iOS并发的video导致黑屏的情况，后续也可以作为自定义播放器
 * 视频仅一个预加载完成，才能执行下一个，如果失败，可测试点击后自动播放;
 */
let id = 0;
const getUid = () => `mc-video-${id++}`;

let nextSchedule = Promise.resolve();
const createSchedule = () => {
	let next;
	let preSchedule = nextSchedule;
	nextSchedule = new Promise((resolve, reject) => {
		next = resolve;
	});

	return {
		complete: () => {
			next();
			return preSchedule;
		},
		start: async (done) => {
			let allow = await preSchedule;
			done();
		}
	};
};

McComponent({
	props: {
		spinOpts: {
			type: Object,
			value: {
				size: 50
			}
		},
		playStyle: {
			type: String,
			value: ''
		},
		src: {
			type: String,
			observer: 'init'
		},
		autoplay: {
			type: Boolean,
			value: false
		},
		poster: {
			type: String
		},
		showCenterPlayBtn: {
			type: Boolean,
			value: true
		},
		showMuteBtn: {
			type: Boolean,
			value: false
		},
		showPlayBtn: {
			type: Boolean,
			value: true
		},
		showFullscreenBtn: {
			type: Boolean,
			value: true
		},
		controls: {
			type: Boolean,
			value: true
		},
		pictureInPictureMode: {
			type: [String, Array],
		}
		// TODO: 其他属性
	},

	data: {
		elementId: '',
		// 尝试加载视频
		hasTryLoad: false,
		// 视频加载失败
		hasLoadFail: false,
		// 主动点击
		hasClick: false
	},

	lifetimes: {
		attached() {
			this.setData({ elementId: getUid() });
		},
		detached() {
			this.schedule.complete();
		}
	},

	pageLifetimes: {
		// 避免点击太快的问题, 切换页面时，调度没有完成的情况
		hide() {
			this.schedule.complete();
		}
	},

	methods: {
		async init() {
			console.log('[@wya-mc/video]: init');
			if (this.schedule) {
				await this.schedule.complete();
				// 已经try load 或 load fail
				if (this.data.hasTryLoad || this.data.hasLoadFail) {
					this.setData({
						elementId: getUid(),
						hasTryLoad: false,
						hasLoadFail: false
					});
				}
			}
			this.schedule = createSchedule();
			this.schedule.start(
				() => {
					// 只有这个才能执行触发handleLoadMetaData，所以hasTryLoad很重要
					this.setData({
						hasTryLoad: true
					});
				}
			);
		},

		/**
		 * 下载完成，允许执行下一个
		 */
		handleLoadMetaData() {
			if (!this.data.hasLoadFail) {
				console.log('[@wya-mc/video]: load');
				this.schedule.complete();
			} else {
				console.log('[@wya-mc/video]: load  after click');
			}

			this.triggerEvent('loadedmetadata');
		},

		handleError() {
			if (!this.data.hasLoadFail) {
				console.log('[@wya-mc/video]: error');
				this.setData({
					hasLoadFail: true,
					elementId: getUid()
				});

				this.schedule.complete();
			} else {
				/**
				 * TODO: 如果还失败，就考虑下载资源
				 */
				console.log('[@wya-mc/video]: error after click');
			}

			this.triggerEvent('error');
		},

		handlePlay() {
			if (!this.data.hasLoadFail) return;
			this.setData({
				hasClick: true
			});
		},

		handleStartPlay(e) {
			this.$emit('play', e);
		}

	}
});

</script>

<style lang="scss">

.mc-video {
	width: 100%;
	height: 100%;
	.is-tag-video {
		width: 100%;
		height: 100%;
	}
	.mc-video__placeholder {
		display: flex;
		justify-content: center;
		align-items: center;
		background: rgba(0, 0, 0, 1);
		width: 100%;
		height: 100%;
		.is-tag-div {
			width: 0;
			height: 0;
			border: 40rpx solid rgba(0, 0, 0, 1);
			border-left: 60rpx solid white;
			transform: translateX(30rpx);
		}
	}
}


</style>

<config>
{
	"component": true,
	"usingComponents": {
		"mc-spin": "../spin/index"
	}
}
</config>
