<template>
	<wxs src="../wxs/utils.wxs" module="utils" />
	<wxs src="./index.wxs" module="getters" />

	<view class="mc-class {{ utils.bem('tabs', [type]) }}">
		<mc-sticky
			disabled="{{ !sticky }}"
			z-index="{{ zIndex }}"
			offset-top="{{ offsetTop }}"
			container="{{ container }}"
			bind:scroll="onTouchScroll"
		>
			<view class="{{ utils.bem('tabs__wrap', { scrollable }) }} {{ type === 'line' && border ? 'mc-hairline__top-bottom' : '' }}">
				<slot name="nav-left" />

				<scroll-view
					scroll-x="{{ scrollable }}"
					scroll-with-animation
					scroll-left="{{ scrollLeft }}"
					class="{{ utils.bem('tabs__scroll', [type]) }}"
					style="{{ color ? 'border-color: ' + color : '' }}"
				>
					<view class="{{ utils.bem('tabs__nav', [type]) }} nav-class">
						<view wx:if="{{ type === 'line' }}" class="mc-tabs__line" style="{{ lineStyle }}" />
						<view
							wx:for="{{ tabs }}"
							wx:key="index"
							data-index="{{ index }}"
							class="{{ getters.tabClass(index === currentIndex, ellipsis) }} {{ utils.bem('tab', { active: index === currentIndex, disabled: item.disabled, complete: !ellipsis }) }}"
							style="{{ getters.tabStyle(index === currentIndex, ellipsis, color, type, item.disabled, titleActiveColor, titleInactiveColor, swipeThreshold, scrollable) }}"
							bind:tap="onTap"
						>
							<view class="{{ ellipsis ? 'mc-ellipsis' : '' }}" style="{{ item.titleStyle }}">
								{{ item.title }}
								<view wx:if="{{ item.info !== undefined && item.info !== null }}" class="mc-tabs__info">{{ item.info }}</view>
								<view wx:elif="{{ item.dot }}" class="mc-tabs__dot"></view>
							</view>
						</view>
					</view>
				</scroll-view>

				<slot name="nav-right" />
			</view>
		</mc-sticky>

		<view
			class="mc-tabs__content"
			bind:touchstart="onTouchStart"
			bind:touchmove="onTouchMove"
			bind:touchend="onTouchEnd"
			bind:touchcancel="onTouchEnd"
		>
			<view
				class="{{ utils.bem('tabs__track', [{ animated }]) }} mc-tabs__track"
				style="{{ getters.trackStyle({ duration, currentIndex, animated }) }}"
			>
				<slot />
			</view>
		</view>
	</view>
</template>
<script>
import McComponent from '../common/component';
import { touch } from '../mixins/touch';
import { isDef, addUnit } from "../common/utils";

McComponent({
	mixins: [touch],
	addGlobalClass: ['nav-class', 'tab-class', 'tab-active-class', 'line-class'],
	relations: {
		'./tabs-pane': {
			type: 'descendant',
			linked(child) {
				this.children = this.children || [];
				this.children.push(child);
				child.index = this.children.length - 1;
				this.updateTabs();
			},
			unlinked(child) {
				this.children = (this.children || []).filter((it) => it !== child);
				this.children = this.children.map((child, index) => {
					child.index = index;
					return child;
				});
				this.updateTabs();
			}
		}
	},
	props: {
		color: {
			type: String,
			observer: 'setLine'
		},
		sticky: Boolean,
		animated: {
			type: Boolean,
			observer() {
				this.children.forEach((child, index) => {
					return child.updateRender(index === this.data.currentIndex, this);
				});
			}
		},
		swipeable: Boolean,
		lineWidth: {
			type: [String, Number],
			value: -1,
			observer: 'setLine'
		},
		lineHeight: {
			type: [String, Number],
			value: -1,
			observer: 'setLine'
		},
		titleActiveColor: String,
		titleInactiveColor: String,
		active: {
			type: [String, Number],
			value: 0,
			observer(name) {
				if (name !== this.getCurrentName()) {
					this.setCurrentIndexByName(name);
				}
			}
		},
		type: {
			type: String,
			value: 'line'
		},
		border: {
			type: Boolean,
			value: true
		},
		ellipsis: {
			type: Boolean,
			value: true
		},
		duration: {
			type: Number,
			value: 0.3
		},
		zIndex: {
			type: Number,
			value: 1
		},
		swipeThreshold: {
			type: Number,
			value: 4,
			observer(value) {
				this.setData({
					scrollable: this.children.length > value || !this.data.ellipsis
				});
			}
		},
		offsetTop: {
			type: Number,
			value: 0
		},
		lazyRender: {
			type: Boolean,
			value: true
		}
	},
	data: {
		tabs: [],
		lineStyle: '',
		scrollLeft: 0,
		scrollable: false,
		trackStyle: '',
		currentIndex: null,
		container: null
	},
	attached() {
		this.children = this.children || [];
		this.setData({
			container: () => this.createSelectorQuery().select('.mc-tabs')
		}, () => {
			this.setLine(true);
			this.scrollIntoView();
		});
	},
	detached() {
		this.children = [];
	},
	 methods: {
		updateContainer() {
			this.setData({
				container: () => this.createSelectorQuery().select('.mc-tabs')
			});
		},
		updateTabs() {
			const { children = [], data } = this;
			this.setData({
				tabs: children.map((child) => child.data),
				scrollable: this.children.length > data.swipeThreshold || !data.ellipsis
			});

			this.setCurrentIndexByName(data.active, this.getCurrentName());
		},
		trigger(eventName, child) {
			const { currentIndex } = this.data;

			const currentChild = child || this.children[currentIndex];

			if (!isDef(currentChild)) {
				return;
			}

			this.$emit(eventName, {
				index: currentChild.index,
				name: currentChild.getComputedName(),
				title: currentChild.data.title
			});
		},
		onTap(event) {
			const { index } = event.currentTarget.dataset;
			const child = this.children[index];

			if (child.data.disabled) {
				this.trigger('disabled', child);
			} else {
				this.setCurrentIndex(index);
				wx.nextTick(() => {
					this.trigger('click');
				});
			}
		},
		// correct the index of active tab
		setCurrentIndexByName(name) {
			const { children = [] } = this;
			const matched = children.filter(
				(child) => child.getComputedName() === name
			);

			if (matched.length) {
				this.setCurrentIndex(matched[0].index);
			}
		},
		setCurrentIndex(currentIndex) {
			const { data, children = [] } = this;

			if (!isDef(currentIndex) || currentIndex >= children.length || currentIndex < 0) {
				return;
			}

			children.forEach((item, index) => {
				const active = index === currentIndex;
				if (active !== item.data.active || !item.inited) {
					item.updateRender(active, this);
				}
			});

			if (currentIndex === data.currentIndex) {
				return;
			}

			const shouldEmitChange = data.currentIndex !== null;
			this.setData({ currentIndex });

			wx.nextTick(() => {
				this.setLine();
				this.scrollIntoView();
				this.updateContainer();

				this.trigger('input');
				if (shouldEmitChange) {
					this.trigger('change');
				}
			});
		},
		getCurrentName() {
			let activeTab = (this.children || [])[this.data.currentIndex];
			if (activeTab) {
				return activeTab.getComputedName();
			}
		},
		setLine(skipTransition) {
			if (this.data.type !== 'line') {
				return;
			}

			const {
				color,
				duration,
				currentIndex,
				lineWidth,
				lineHeight
			} = this.data;

			this.getRect('.mc-tab', true).then((rects) => {
				const rect = rects[currentIndex];
				if (rect == null) {
					return;
				}
				const width = lineWidth !== -1 ? lineWidth : rect.width / 2;
				const height = lineHeight !== -1
					? `height: ${addUnit(lineHeight)}; border-radius: ${addUnit(
						lineHeight
					)};`
					: '';

				let left = rects
					.slice(0, currentIndex)
					.reduce((prev, curr) => prev + curr.width, 0);

				left += (rect.width - width) / 2;

				const transition = skipTransition
					? ''
					: `transition-duration: ${duration}s; -webkit-transition-duration: ${duration}s;`;

				this.setData({
					lineStyle: `
							${height}
							width: ${addUnit(width)};
							background-color: ${color};
							-webkit-transform: translateX(${left}px);
							transform: translateX(${left}px);
							${transition}
						`
				});
			});
		},
		// scroll active tab into view
		scrollIntoView() {
			const { currentIndex, scrollable } = this.data;

			if (!scrollable) {
				return;
			}

			Promise.all([
				this.getRect('.mc-tab', true),
				this.getRect('.mc-tabs__nav')
			]).then(
				([tabRects, navRect]) => {
					const tabRect = tabRects[currentIndex];
					const offsetLeft = tabRects
						.slice(0, currentIndex)
						.reduce((prev, curr) => prev + curr.width, 0);

					this.setData({
						scrollLeft: offsetLeft - (navRect.width - tabRect.width) / 2
					});
				}
			);
		},
		onTouchScroll(event) {
			this.$emit('scroll', event.detail);
		},
		onTouchStart(event) {
			if (!this.data.swipeable) return;
			this.touchStart(event);
		},
		onTouchMove(event) {
			if (!this.data.swipeable) return;
			this.touchMove(event);
		},
		// watch swipe touch end
		onTouchEnd() {
			if (!this.data.swipeable) return;

			const { tabs, currentIndex } = this.data;
			const { direction, deltaX, offsetX } = this;
			const minSwipeDistance = 50;

			if (direction === 'horizontal' && offsetX >= minSwipeDistance) {
				if (deltaX > 0 && currentIndex !== 0) {
					this.setCurrentIndex(currentIndex - 1);
				} else if (deltaX < 0 && currentIndex !== tabs.length - 1) {
					this.setCurrentIndex(currentIndex + 1);
				}
			}
		}
	}
});

</script>
<style lang="scss">
@import '../common/index.wxss';

.mc-tabs {
	position: relative;
	-webkit-tap-highlight-color: transparent
}

.mc-tabs__wrap {
	display: -webkit-flex;
	display: flex;
	overflow: hidden
}

.mc-tabs__wrap--scrollable .mc-tab {
	-webkit-flex: 0 0 22%;
	flex: 0 0 22%
}

.mc-tabs__scroll {
	background-color: #fff;
}

.mc-tabs__scroll--line {
	box-sizing: initial;
	height: calc(100% + 30rpx)
}

.mc-tabs__scroll--card {
	margin: 0 32rpx;
}

.mc-tabs__nav {
	position: relative;
	display: -webkit-flex;
	display: flex;
	-webkit-user-select: none;
	user-select: none
}

.mc-tabs__nav--card {
	box-sizing: border-box;
	height: 60rpx;
	border: 1rpx solid #000000;
	border-radius: 4rpx;
}

.mc-tabs__nav--card .mc-tab {
	color: #000000;
	line-height: 56rpx;
	border-right: 1rpx solid #000000;
}

.mc-tabs__nav--card .mc-tab:last-child {
	border-right: none
}

.mc-tabs__nav--card .mc-tab.mc-tab--active {
	color: #fff;
	background-color: #000000;
}

.mc-tabs__nav--card .mc-tab--disabled {
	color: #c8c9cc;
}

.mc-tabs__line {
	position: absolute;
	bottom: 0;
	left: 0;
	z-index: 1;
	height: 6rpx;
	border-radius: 6rpx;
	background-color: #000000;
}

.mc-tabs__track {
	position: relative;
	width: 100%;
	height: 100%
}

.mc-tabs__track--animated {
	display: -webkit-flex;
	display: flex;
	transition-property: -webkit-transform;
	transition-property: transform;
	transition-property: transform, -webkit-transform
}

.mc-tabs__content {
	overflow: hidden
}

.mc-tabs--line .mc-tabs__wrap {
	height: 88rpx;
}

.mc-tabs--card .mc-tabs__wrap {
	height: 60rpx;
}

.mc-tab {
	position: relative;
	-webkit-flex: 1;
	flex: 1;
	box-sizing: border-box;
	min-width: 0;
	padding: 0 10rpx;
	text-align: center;
	cursor: pointer;
	color: #666666;
	font-size: 30rpx;
	line-height: 88rpx;
}

.mc-tab--active {
	color: #000000;
}

.mc-tab--disabled {
	color: #c8c9cc;
}

.mc-tab--complete {
	-webkit-flex: 1 0 auto !important;
	flex: 1 0 auto !important
}

.mc-tabs__info {
	position: relative !important;
	top: -14rpx !important;
	padding: 0 8rpx;
	display: inline-block;
	height: 32rpx;;
	min-width: 32rpx;;
	line-height: 32rpx;;
	-webkit-transform: translateX(0) !important;
	transform: translateX(0) !important;
	font-size: 24rpx;
	color: #ffffff;
	background-color: #ff3c4a;
	border-radius: 32rpx;;
	box-sizing: border-box;
}
.mc-tabs__dot {
	position: relative !important;
	top: -20rpx !important;
	right: 0;
	display: inline-block;
	width: 10rpx;
	height: 10rpx;
	border-radius: 10rpx;
	background-color: #ff3c4a;
}
</style>
<config>
{
	"component": true,
	"usingComponents": {
		"mc-sticky": "../sticky/index"
	}
}
</config>
