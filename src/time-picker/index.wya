<template>
	<view class="mc-time-picker mc-class" bindtap="handleClick">
		<mc-list-item 
			wx:if="{{!useItemSlot}}"
			wrapper-class="{{paddingNone ? 'mc-time-picker__padding-none' : ''}}"
			content-class="content-class"
			indent="{{0}}"
			content="{{content || extra}}"
			label="{{label}}"
			label-width="{{labelWidth}}"
			border="{{border}}"
		/>
		<slot wx:else></slot>
	</view>
	<mc-picker-popup 
		id="{{tag}}"
		title="{{title}}"
		cancel-text="{{cancelText}}"
		ok-text="{{okText}}"
		show-toolbar="{{showToolbar}}"
		bind:close="handleCancel"
	>
		<mc-picker-view
			value="{{currentValue}}"
			dataSource="{{dataSource}}"
			mode="{{mode}}"
			indicator-style="{{indicatorStyle}}"
			indicator-class="{{indicatorClass}}"
			bind:change="handleChange"
			bind:ready="handleViewReady"
		/>
	</mc-picker-popup>
</template>
<script>
import { isEqualWith, preZero } from '../common/utils';
import McComponent from '../common/component';
import Portal from '../portal/index';
import { pickerViewProps, pickerPopupProps } from './props';

McComponent({
	externalClasses: ['content-class'],
	relations: {
		'../form/form-item': {
			type: 'ancestor',
			linked(parent) {
				this.parent = parent;
				this.setData({
					paddingNone: true
				});
			},
			unlinked(child) {
				this.parent = null;
				this.setData({
					paddingNone: false
				});
			}
		}
	},
	props: {
		...pickerViewProps,
		...pickerPopupProps,
		value: {
			type: String, // 为24小时制的 时间字符串
			value: '',
			observer(val) {
				let formatValue = this.formatValue(val);
				let formatContent = this.formatContent(formatValue);
				if (!isEqualWith(formatValue, this.data.currentValue)) {
					this.setData({
						currentValue: formatValue,
						pickValue: formatValue
					});
				}
				if (!isEqualWith(formatContent, this.data.content)) {
					this.setData({ content: formatContent });
				}
			}
		},
		defaultValue: {
			type: String,
			value: '',
			observer(val) {
				let formatValue = this.formatValue(val);
				if (!isEqualWith(formatValue, this.data.currentValue)) {
					this.setData({
						currentValue: formatValue,
						pickValue: formatValue,
					});	
				}
			}
		},
		label: String,
		labelWidth: {
			type: String,
			optionalTypes: [Number],
		},
		tag: {
			type: String,
			value: 'picker-popup'
		},
		useItemSlot: {
			type: Boolean,
			value: false
		},
		border: Boolean,
		extra: {
			type: String,
			value: '请选择'
		},
	},
	data: {
		currentValue: [],
		content: ''
	},
	lifetimes: {
		attached() {
			this.Func = new Portal({ 
				el: `#${this.data.tag}` 
			});
		}
	},
	destroyed() {
	
	},
	methods: {
		// 外部传入的时间转换成组件内需要的数组格式
		formatValue(value) {
			let [hour, minute] = value.split(':');
			if (this.data.mode == '12') {
				let quantum;
				// 24小时制的 00 -> 12小时制的 12 am
				// 24小时制的 12 -> 12小时制的 12 pm
				if (hour == 0) {
					quantum = 1;
					hour = 12;
				} else if (hour == 12) {
					quantum = 2;
				} else {
					quantum = hour < 12 ? 1 : 2;
					hour = hour < 12 ? hour : hour - 12;
				}
				return [+quantum, +hour, +minute];
			}
			return [+hour, +minute];
		},
		// 内部的数组格式转化为组件要展示的文案
		formatContent(value) {
			if (this.data.mode == '12') {
				const [quantum, hour, minute] = value;
				const quantunMap = {
					1: 'a.m.',
					2: 'p.m.',
				};
				return `${preZero(hour)}:${preZero(minute)} ${quantunMap[quantum]}`;
			} else {
				let [hour, minute] = value;
				return `${preZero(hour)}:${preZero(minute)}`;
			}
		},
		// 内部的数组格式转化为外部要接收的字符串
		parseValue(value) {
			if (this.data.mode == '12') {
				let [quantum, hour, minute] = value;
				if (quantum == 1 && hour == 12) {
					hour = 0;
				} else if (quantum == 2 && hour == 12) {
					hour = 12;
				} else if (quantum == 2) {
					hour += 12;
				}
				return `${preZero(hour)}:${preZero(minute)}`;
			} else {
				let [hour, minute] = value;
				return `${preZero(hour)}:${preZero(minute)}`;
			}
		},
		handleViewReady(event) {
			this.viewInstance = event.detail;
		},
		handleClick(event) {
			if (this.Func) {
				this.Func.popup({
					context: this.selectComponent(`#${this.data.tag}`),
					title: this.data.title
				}).then((res) => {
					this.handleOK();
				}).catch((err) => {
					this.$emit('cancel');
					this.handleClose();
				});
			}
		},
		handleChange(event) {
			this.setData({
				pickValue: event.detail || []
			});
		},
		handleOK() {
			const pickValue = this.data.pickValue || this.viewInstance.getDefaultValue();
			this.setData({
				content: this.formatContent(pickValue),
				currentValue: pickValue
			});
			this.$emit('change', { value: this.parseValue(pickValue) });
			this.parent && this.parent.fieldChange();
		},
		handleCancel() {
			this.$emit('cancel');
			this.handleClose();
		},
		handleClose() {
			this.viewInstance.reset(this.data.currentValue);
			this.$emit('close');
		}
	}
});
</script>
<style lang="scss">
@import '../common/index.scss';

.mc-time-picker {
	.mc-time-picker__padding-none {
		padding: 0
	}
}

</style>
<config>
{
	"component": true,
	"usingComponents": {
		"mc-list-item": "../list/list-item",
		"mc-picker-popup": "../picker/picker-popup",
		"mc-picker-view": "./picker-view"
	}
}
</config>
