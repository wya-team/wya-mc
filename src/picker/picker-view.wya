<template>
	<picker-view 
		class="mc-picker-view" 
		value="{{currentValue}}" 
		indicator-style="{{indicatorStyle}}" 
		indicator-class="{{indicatorClass}}" 
		style="width: 100%"
		bindchange="handleChange"
		bindpickstart="handlePickStart"
		bindpickend="handlePickEnd"
	>
		<picker-view-column wx:for="{{currentData}}" wx:for-item="column" wx:key="index">
			<view class="mc-picker-view__item" wx:for="{{column}}" wx:key="value" style="height: 80rpx">
				<view class="mc-picker-view__item-text">{{item.label}}</view>
			</view>
		</picker-view-column>
	</picker-view>
</template>
<script>
import { isEqualWith } from '../common/utils';
import McComponent from '../common/component';
import { pickerViewProps } from './props';

McComponent({
	props: {
		...pickerViewProps,
		value: {
			type: Array,
			value: []
		},
	},
	data: {
		currentValue: [],
		currentLabel: []
	},
	observers: {
		'dataSource, value': function (dataSource, value) {
			let currentValue = this.formatValue(value, true);
			if (!isEqualWith(currentValue, this.data.currentValue)) {
				this.setData({ currentValue });
			}
			this.formatData(dataSource, this.data.currentValue);
		}
	},
	lifetimes: {
		attached() {
			this.$emit('ready', this);
		},
	},
	methods: {
		formatData(dataSource, currentValue) {
			const { cols } = this.data || {};
			let currentData = [];
			// 校验格式是否正确
			this.checkMetaData(dataSource);
			// 处理数据
			if (this.isOneDimensional) {
				currentData = this.parseData(dataSource, { currentValue });
			} else if (this.isTwoDimensional) {
				currentData = [...dataSource];
			}
			if (cols > 0 && currentData.length > cols) {
				currentData = currentData.slice(0, cols);
			}
			
			const currentLabel = currentValue.map((it, index) => {
				return currentData[index] && currentData[index][it] ? currentData[index][it].label : '';
			}).filter((it) => it);
			this.setData({ currentData, currentLabel });
			wx.nextTick(() => {
				this.$emit('label-change', currentLabel);
			});
		},
		checkMetaData(dataSource) {
			// 一维数组
			this.isOneDimensional = dataSource.every((it) => {
				if (typeof it === 'object' && typeof it.label !== 'undefined' && typeof it.value !== 'undefined') {
					return true;
				}
				return false;
			});
			if (this.isOneDimensional) return;
			// 二维数组
			this.isTwoDimensional = dataSource.every((it) => {
				if (it instanceof Array) {
					return it.every((it) => {
						return typeof it.label !== 'undefined' && typeof it.value !== 'undefined';
					});
				}
				return false;
			});
			if (this.isTwoDimensional) return;
			
			if (!this.isOneDimensional && !this.isTwoDimensional) {
				throw Error('【mc-pciker】dataSource数据格式错误，请检查');
			}
		}, 
		// value为picker-view-column 当前选择的是第几项
		parseData(dataSource, opts) {
			const { currentValue, data = [], col = 0 } = opts || {};
			data[col] = [];
			if (!dataSource) { console.trace(); }
			for (let i = 0, length = dataSource.length; i < length; i++) {
				data[col].push(dataSource[i]);
				/* eslint-disable */
				if (
					((dataSource[i] || {}).children instanceof Array && dataSource[i].children.length)
					&& (
						i === currentValue[col]
						|| (i === 0 && (currentValue[col] === undefined || currentValue[col] === null))
					) // 如果当前列没有选中的值，默认拿第一个
					&& (col < this.data.cols - 1 || !this.data.cols)) {
					this.parseData(dataSource[i].children, { currentValue, data, col: col + 1 });
				}
				/* eslint-enable */
			}
			return data;
		},
		// 数据中真实的value
		parseDataByValue(dataSource, opts) {
			const { value, data = [], col = 0 } = opts || {};
			data[col] = dataSource;
			// 如果当前列没有选中的值，默认拿第一个
			if (
				(value[col] === undefined || value[col] === null) 
				&& (dataSource[0] || {}).children instanceof Array 
				&& (dataSource[0] || {}).children.length
			) {
				this.parseDataByValue(dataSource[0].children, { value, data, col: col + 1 });
			} else {
				for (let i = 0, length = dataSource.length; i < length; i++) {
					if (dataSource[i].value === value[col] && dataSource[i].children instanceof Array) {
						this.parseDataByValue(dataSource[i].children, { value, data, col: col + 1 });
					}
				}
			}
			
			return data;
		},
		formatValue(value, needUpdateCurrentData) {
			const { dataSource, cols } = this.data;
			if (needUpdateCurrentData && this.isOneDimensional) {
				let data = this.parseDataByValue(dataSource, { value });
				if (cols > 0 && data.length > cols) {
					data = data.slice(0, cols);
				}
				this.setData({ currentData: data });
			}
			value = value.map((it, index) => {
				return (this.data.currentData[index] || []).findIndex((i) => i.value === it);
			});
			return value;
		},
		parserValue(value) {
			const { currentData } = this.data;
			return value.map((it, index) => {
				return currentData[index][it].value;
			});
		},
		getTouchColumn(val) {
			const { currentValue } = this.data;
			for (let i = 0, length = val.length; i < length; i++) {
				if ((currentValue[i] !== undefined && val[i] !== currentValue[i]) || (val[i] !== 0 && currentValue[i] === undefined)) {
					return i;
				}
			}
		},
		getLabelByValue(val) {
			const value = this.formatValue(val);
			const { currentData } = this.data;
			return value.map((it, index) => {
				return currentData[index][it].label;
			});
		},
		getDefaultValue() {
			const { currentData } = this.data;
			return currentData.reduce((pre, cur) => {
				const item = cur[0] || {};
				pre.push(item.value);
				return pre;
			}, []);
		},
		handlePickStart(event) {
			this.isTouching = true;
		},
		handlePickEnd(event) {
			this.isTouching = false;
		},
		handleChange(event) {
			const { currentData, dataSource } = this.data;
			let { value } = event.detail;
			// 一维数组是联动的picker，需要重新设置currentData
			if (this.isOneDimensional) {
				const index = this.getTouchColumn(value);
				if (index < currentData.length - 1) {
					value = value.reduce((pre, cur, key) => {
						pre.push(key <= index ? cur : 0);
						return pre;
					}, []);
				}
				const data = this.parseData(dataSource, { currentValue: value });
				this.setData({ currentData: data });
				if (value.length > data.length) {
					value = value.splice(0, data.length);
				} else if (data.length > value.length) {
					let left = data.length - value.length;
					value.splice(value.length, 0, ...Array(left).fill(0));
				}
			}
			this.setData({ currentValue: value });
			this.$emit('change', this.parserValue(value));
		},
		reset(val) {
			const { dataSource } = this.data;
			const value = this.formatValue(val, true);
			this.setData({ currentValue: value });
		},
	}
});

</script>
<style lang="scss">
@import '../common/index.scss';

.mc-picker-view {
	height: 476rpx;
	.mc-picker-view__item {
		line-height: 80rpx; 
		font-size: 34rpx;
		color: #000;
		display: flex;
		justify-content: center;
		align-items: center;
	}
	.mc-picker-view__item-text {
		display: block;
		white-space:nowrap;
		overflow:hidden;
		text-overflow:ellipsis;
	}
}
</style>
<config>
{
	"component": true
}
</config>
