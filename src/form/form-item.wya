<template>
	<view style="padding-left: {{indent}}rpx" class="mc-form-item mc-class">
		<view class="mc-form-item__wrapper {{classes}}">
			<view wx:if="{{label || !useLabelSlot}}" for="{{labelFor}}" style="{{labelStyle}}" class="mc-form-item__label label-class">
				{{label}}
			</view>
			<slot name="label"></slot>
			<view style="{{contentStyle}}" class="mc-form-item__content content-class">
				<slot />
			</view>
		</view>
	</view>
</template>
<script>
// TODO: 按需加载async-validator, 如getApp().AsyncValidator
import AsyncValidator from 'async-validator';
import { RegEx } from '../common/regex';
import McComponent from '../common/component';
import { formComponents } from './relations';
import { getPropByPath, filterEmpty } from '../common/utils';

McComponent({
	externalClasses: ['label-class', 'content-class'],
	relations: {
		'./index': {
			type: 'ancestor',
			linked(parent) {
				this.parent = parent;
				// 下面两个方法内部都用到了parent,所以需要在拿到parent之后调用
				this.setLabelStyle(this.data.labelWidth);
				this.setLabelPosition(this.data.labelPosition);
				this.setItemDivider();
				this.setRules();
				this.setFieldValue(this.data.prop);
			},
			unlinked() {
				this.parent = null;
			},
		},
		...formComponents
	},
	props: {
		label: {
			type: String,
			value: ''
		},
		labelWidth: {
			type: Number,
			observer(val) {
				this.parent && this.setLabelStyle(val);
			}
		},
		labelPosition: {
			type: String,
			observer(val) {
				this.parent && this.setLabelPosition(val);
			}
		},
		useLabelSlot: Boolean,
		prop: {
			type: String,
			observer(val) {
				this.parent && this.setFieldValue();
			}
		},
		required: {
			type: Boolean,
			value: false
		},
		rules: {
			type: Array,
			optionalTypes: [Object],
			observer(val) {
				this.parent && this.setRules();
			}
		},
		labelFor: {
			type: String
		},
		indent: {
			type: Number,
			value: 32
		}
	},
	data: {
	},
	lifetimes: {
		
	},
	methods: {
		setLabelStyle(labelWidth) {
			const width = labelWidth || this.parent.data.labelWidth;
			this.setData({
				labelStyle: `width: ${width > 0 ? `${width}rpx` : 'auto'};`,
				contentStyle: `margin-left: ${width > 0 ? `${width}rpx` : 'unset'}`
			});	
		},
		setLabelPosition(labelPosition) {
			const position = labelPosition || this.parent.data.labelPosition;
			if (position === 'top') {
				this.setData({ contentStyle: 'margin-left: 0' });
			}
			this.setData({ classes: `is-${position}` });	
		},
		setItemDivider() {
			const showDivider = this.parent.data.divider;
			this.setData({ classes: `${this.data.classes} ${showDivider ? 'is-divider' : ''}` });	
		},
		setRules() {
			const { required } = this.data;
			let rules = this.getRules();
			if (rules.length && required) {
				return;
			} else if (rules.length) {
				this.isRequired = rules.some(rule => {
					return typeof rule.required === 'function' 
						? rule.required(() => {}) // 避免报错 契合业务的一种设计（@wya/utils - RegEx: validator）
						: rule.required;
				});
			} else if (required) {
				this.isRequired = required;
			}
		},
		setFieldValue(prop) {
			const model = this.parent.data.model;
			let path = prop || this.data.prop;
			if (!model || !path) { return; }
			
			if (path.includes(':')) {
				path = path.replace(/:/, '.');
			}

			this.setData({
				fieldValue: getPropByPath(model, path).value
			});
		},
		getRules() {
			const { rules, prop } = this.data;
			let formRules = this.parent.data.rules;
			const selfRules = rules;
			formRules = formRules ? formRules[prop] : [];
			return selfRules && selfRules.length ? selfRules : formRules && formRules.length ? formRules : [];
		},
		getFilteredRule(trigger) {
			const rules = this.getRules();
			return rules.filter(rule => !rule.trigger || rule.trigger.includes(trigger));
		},
		validate(trigger, callback = () => {}) {
			let rules = this.getFilteredRule(trigger);
			rules = rules.map((i) => {
				if (!i.validator && !i.type && i.required) {
					return {
						...i,
						validator: RegEx.validator // TODO
					};
				} else {
					return i;
				}
			});
			if (!rules || rules.length === 0) {
				if (!this.data.required) {
					callback();
					return true;
				} else {
					rules = [{ required: true }];
				}
			}

			this.validateState = 'validating';
			let descriptor = {};

			descriptor[this.data.prop] = rules;
			let validator = new AsyncValidator(descriptor);
			let model = {};
			model[this.data.prop] = filterEmpty(this.data.fieldValue);
			validator.validate(model, { firstFields: false }, (errors, fields) => {
				this.validateState = !errors ? 'success' : 'error';
				this.validateMessage = errors ? errors[0].message : '';
				callback({
					prop: this.data.prop,
					msg: this.validateMessage
				});
			});
			this.validateDisabled = false;
		},
		resetField() {
			this.validateState = '';
			this.validateMessage = '';
			

			let model = this.parent.data.model;
			let value = this.data.fieldValue;
			let path = this.data.prop;
			if (path.includes(':')) {
				path = path.replace(/:/, '.');
			}

			let prop = getPropByPath(model, path);

			if (Array.isArray(value)) {
				this.validateDisabled = true;
				prop.target[prop.key] = [].concat(this.initialValue);
			} else {
				this.validateDisabled = true;
				prop.target[prop.key] = this.initialValue;
			}

		},
		fieldBlur() {
			// TODO 应该搭配页面样式才是预想的blur效果，现在change和blur都必须点击提交才能弹出toast
			this.validate('blur');
		},
		fieldChange(v) {
			if (this.validateDisabled) {
				this.validateDisabled = false;
				return;
			}
			this.validate('change');
		}
	}
});

</script>
<style lang="scss">
@import '../common/index.scss';

.mc-form-item {
	position: relative;
	background-color: #ffffff;
	.mc-form-item__wrapper {
		padding-top: 24rpx;
		padding-bottom: 24rpx;
		padding-right: 24rpx;
		vertical-align: middle;
		clear: both;
		overflow: hidden;
		&.is-right {
			.mc-form-item__label {
				text-align: right;
			}
		}
		&.is-top {
			.mc-form-item__label {
				float: none;
				display: inline-block;
				padding: 0 0 20rpx 0
			}
		}
		&.is-divider {
			&:after {
				position: absolute;
				box-sizing: border-box;
				-webkit-transform-origin: center;
				transform-origin: center;
				content: " ";
				pointer-events: none;
				top: auto;
				right: 0;
				bottom: 0;
				left: 0;
				border-bottom: 1px solid #F2F2F2;
				-webkit-transform: scaleY(.5);
				transform: scaleY(.5)
			}
		}
	}
	.mc-form-item__content {
		position: relative;
		font-size: 32rpx;
		line-height: 48rpx;
	}
	.mc-form-item__label {
		text-align: left;
		vertical-align: middle;
		float: left;
		color: #000;
		font-size: 32rpx;
		line-height: 48rpx;
		box-sizing: border-box;
	}
	.mc-list-item__wrapper {
		padding: 0 !important;
	}
}
</style>
<config>
{
	"component": true
}
</config>
